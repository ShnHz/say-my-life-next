{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/easy-typer-js@2.1.0/node_modules/easy-typer-js/src/lib/index.js"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass EasyTyper {\r\n    constructor(obj, input, fn, hooks) {\r\n        checkKeyIsNull(obj);\r\n        checkFieldIsError(obj);\r\n        this.obj = obj;\r\n        this.input = typeof input === 'string' ? [input] : input;\r\n        this.fn = typeof fn === 'function' ? fn : function () { };\r\n        this.hooks = typeof hooks === 'function' ? hooks : function () { };\r\n        this.timer = 0;\r\n        this.typeAction = {\r\n            rollback: this.typedBack.bind(this),\r\n            normal: this.play.bind(this),\r\n            custom: this.fn\r\n        };\r\n        // 实例化完后立即执行打字输出\r\n        this.init();\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.play();\r\n    }\r\n    // 打字\r\n    play() {\r\n        if (!this.input.length)\r\n            return this.fn(this);\r\n        let i = 0, stop = false, input = this.input.shift() || '';\r\n        this.timer = setInterval(() => {\r\n            if (i === input.length) {\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd)\r\n                return this.closeTimer();\r\n            if (stop)\r\n                return this.nextTick();\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i++;\r\n        }, this.obj.speed);\r\n    }\r\n    // 回滚方法\r\n    typedBack() {\r\n        // 如果句子出书完毕，且是句子暂停模式\r\n        if (!this.input.length && this.obj.sentencePause)\r\n            return this.fn(this);\r\n        let input = this.obj.output;\r\n        let i = input.length, stop = false;\r\n        this.timer = setInterval(() => {\r\n            if (i === -1) {\r\n                this.obj.output = '';\r\n                this.hooks('', this);\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd) {\r\n                this.closeTimer();\r\n                return this.obj.singleBack = false;\r\n            }\r\n            if (stop) {\r\n                this.obj.singleBack = false;\r\n                return (() => {\r\n                    const { length } = this.input;\r\n                    return length ? this.play() : this.fn(this);\r\n                })();\r\n            }\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i--;\r\n        }, this.obj.backSpeed);\r\n    }\r\n    // 下一次触发方式\r\n    nextTick() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // 等待\r\n            yield this.sleep(this.obj.sleep);\r\n            return this.obj.singleBack ? this.typedBack() : this.getOutputType();\r\n        });\r\n    }\r\n    // 输出方式\r\n    getOutputType() {\r\n        return this.typeAction[this.obj.type](this);\r\n    }\r\n    // 关闭定时器\r\n    closeTimer() {\r\n        clearInterval(this.timer);\r\n    }\r\n    // 线程等待\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    // 结束\r\n    close() {\r\n        return this.obj.isEnd = true;\r\n    }\r\n}\r\n// 错误提示语\r\nconst errorTip = (message) => {\r\n    throw new Error(message);\r\n};\r\n// 校验参数完整性\r\nconst checkKeyIsNull = (obj) => {\r\n    const props = {\r\n        output: '',\r\n        type: '',\r\n        isEnd: false,\r\n        speed: 80,\r\n        backSpeed: 40,\r\n        sleep: 3000,\r\n        singleBack: false,\r\n        sentencePause: false\r\n    };\r\n    const propsKeys = Object.keys(props);\r\n    const objKeys = Object.keys(obj);\r\n    if (propsKeys.length !== objKeys.length) {\r\n        errorTip('配置对象错误: 字段数量不正确！');\r\n    }\r\n    propsKeys.forEach(key => {\r\n        if (obj[key] === undefined || obj[key] === null) {\r\n            errorTip('配置对象错误：字段值为null或undefined！');\r\n        }\r\n    });\r\n};\r\n// 检验参数类型\r\nconst checkFieldIsError = (obj) => {\r\n    Object.keys(obj).forEach(key => {\r\n        const proxy = EasyTyperStrategy[key](obj);\r\n        if (proxy.check()) {\r\n            proxy.showTip(key);\r\n        }\r\n    });\r\n};\r\n// 策略分发\r\nconst EasyTyperStrategy = (() => ({\r\n    output: (obj) => {\r\n        return new CheckField(`string`, obj.output);\r\n    },\r\n    type: (obj) => {\r\n        return new CheckField(`string`, obj.type);\r\n    },\r\n    isEnd: (obj) => {\r\n        return new CheckField(`boolean`, obj.isEnd);\r\n    },\r\n    speed: (obj) => {\r\n        return new CheckField(`number`, obj.speed);\r\n    },\r\n    backSpeed: (obj) => {\r\n        return new CheckField(`number`, obj.backSpeed);\r\n    },\r\n    sleep: (obj) => {\r\n        return new CheckField(`number`, obj.sleep);\r\n    },\r\n    singleBack: (obj) => {\r\n        return new CheckField(`boolean`, obj.singleBack);\r\n    },\r\n    sentencePause: (obj) => {\r\n        return new CheckField(`boolean`, obj.sentencePause);\r\n    },\r\n}))();\r\n// 字段校验类\r\nclass CheckField {\r\n    constructor(type, field) {\r\n        this.type = type;\r\n        this.field = field;\r\n    }\r\n    check() {\r\n        return typeof this.field !== `${this.type}`;\r\n    }\r\n    showTip(name) {\r\n        errorTip(`配置对象错误：属性 ${name} 必须为 ${this.type} 类型！`);\r\n    }\r\n}\r\nexport default EasyTyper;\r\n"],
  "mappings": "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",
  "names": []
}

import{_ as l,c as p,C as s,a,V as n,o}from"./chunks/framework.f518e559.js";const w=JSON.parse('{"title":"看了antfu大佬的v-lazy-show,我学会了怎么编译模板指令","description":"","frontmatter":{"title":"看了antfu大佬的v-lazy-show,我学会了怎么编译模板指令","date":"2023/05/09 11:44:52","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["info","vue","js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/vue/KanLiaoantfuDaLaoDevlazyshowWoXueHuiLiaoZenMeBianYiMoBanZhiLing.md"}'),e={name:"views/blog/vue/KanLiaoantfuDaLaoDevlazyshowWoXueHuiLiaoZenMeBianYiMoBanZhiLing.md"},t=s("h6",{id:"原文-掘金",tabindex:"-1"},[a("原文 "),s("a",{href:"https://juejin.cn/post/7217836890119995450",target:"_blank",rel:"noreferrer"},"掘金"),a(),s("a",{class:"header-anchor",href:"#原文-掘金","aria-label":'Permalink to "原文 [掘金](https://juejin.cn/post/7217836890119995450)"'},"​")],-1),c={class:"markdown-body cache"},r=s("h3",{id:"前言",tabindex:"-1"},[a("前言 "),s("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1),y={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fantfu%2Feslint-config",target:"_blank",title:"https://github.com/antfu/eslint-config",ref:"nofollow noopener noreferrer"},D={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Funocss%2Funocss",target:"_blank",title:"https://github.com/unocss/unocss",ref:"nofollow noopener noreferrer"},C={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvitest-dev%2Fvitest",target:"_blank",title:"https://github.com/vitest-dev/vitest",ref:"nofollow noopener noreferrer"},F={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fv-lazy-show",target:"_blank",title:"https://github.com/antfu/v-lazy-show",ref:"nofollow noopener noreferrer"},A=n(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/012de87dc3e04510902615712a69725c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p><p>看了下是两天前的，所以好奇点进去看看是什么东东。</p><p>介绍是：<strong>A compile-time directive to lazy initialize v-show for Vue. It makes components mount after first truthy value (v-if), and the DOM keep alive when toggling (v-show).</strong></p><p>简单的说，v-lazy-show 是一个编译时指令，就是对 v-show 的一种优化，因为我们知道，v-show 的原理只是基于简单的切换 display none，false则为none，true则移除</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7277ad30bbd4ec7906cb3574d5ea247~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="bite-me-i-dare-you.gif" loading="lazy"></p><p>但即使在第一次条件为 falsy 的时候，其依然会渲染对应的组件，那如果该组件很大，就会带来额外的渲染开销，比如我们有个 Tabs，默认初始显示第一个 tab，但后面的 tab 也都渲染了，只是没有显示罢了（实际上没有必要，因为可能你点都不会点开）。</p><p>那基于此种情况下，我们可以优化一下，即第一次条件为 falsy 的情况下，不渲染对应的组件，直到条件为 truthy 才渲染该组件。</p><p>将原本的 v-show 改为 v-lazy-show 或者 v-show.lazy</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import ExpansiveComponent from &#39;./ExpansiveComponent.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">const enabled = ref(false)</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/script&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;button @click=&quot;enabled = !enabled&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Toggle</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;/button&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;div class=&quot;hello-word-wrapper&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent v-lazy-show=&quot;enabled&quot; msg=&quot;v-lazy-show&quot; /&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent v-show.lazy=&quot;enabled&quot; msg=&quot;v-lazy.show&quot; /&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent v-show=&quot;enabled&quot; msg=&quot;v-show&quot; /&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent v-if=&quot;enabled&quot; msg=&quot;v-if&quot; /&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;/div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;!-- ExpansiveComponent.vue --&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { onMounted } from &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">const props = defineProps({</span></span>
<span class="line"><span style="color:#A6ACCD;">  msg: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    type: String,</span></span>
<span class="line"><span style="color:#A6ACCD;">    required: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">onMounted(() =&amp;gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`\${props.msg} mounted\`)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/script&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;div v-for=&quot;i in 1000&quot; :key=&quot;i&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      Hello {{ msg }}</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;/div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;/div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc4dc930fc54f65bbc52c63397c56cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="2023-04-03 15.55.15.gif" loading="lazy"></p><blockquote><p>ExpansiveComponent 渲染了 1000 行 div，在条件 enabled 初始为 false 的情况下，对应 v-show 来说，其依然会渲染，而对于 v-lazy-show 或 v-show.lazy 来说，只有第一次 enabled 为 true 才渲染，避免了不必要的初始渲染开销</p></blockquote><h3 id="如何使用" tabindex="-1">如何使用？ <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用？&quot;">​</a></h3><p>国际惯例，先装下依赖，这里强烈推荐 antfu 大佬的 <strong>ni</strong>。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"><span style="color:#FFCB6B;">ni</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre></div><p>既然是个编译时指令，且是处理 vue template 的，那么就应该在对应的构建工具中配置，如下：</p><p>如果你用的是 vite，那么配置如下</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">transformLazyShow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">nodeTransforms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">            transformLazyShow</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &amp;lt;--- 加在这里</span></span>
<span class="line"><span style="color:#A6ACCD;">          ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>如果你用的是 Nuxt，那么应该这样配置：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// nuxt.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">transformLazyShow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineNuxtConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">vue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">nodeTransforms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        transformLazyShow</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &amp;lt;--- 加上这行</span></span>
<span class="line"><span style="color:#A6ACCD;">      ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="那么-该指令是如何起作用的" tabindex="-1">那么，该指令是如何起作用的？ <a class="header-anchor" href="#那么-该指令是如何起作用的" aria-label="Permalink to &quot;那么，该指令是如何起作用的？&quot;">​</a></h3>`,21),i={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fv-lazy-show%2Fblob%2Fmain%2Fsrc%2Findex.ts",target:"_blank",title:"https://github.com/antfu/v-lazy-show/blob/main/src/index.ts",ref:"nofollow noopener noreferrer"},m=n(`<p>源码不多，我这里直接贴出来，再一步步看如何实现（这里快速过一下即可，后面会一步步分析）：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">CREATE_COMMENT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">FRAGMENT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createCallExpression</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createCompoundExpression</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createConditionalExpression</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createSequenceExpression</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createSimpleExpression</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createStructuralDirectiveTransform</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">createVNodeCall</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">traverseNode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vue/compiler-core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> indexMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/vuejs/core/blob/f5971468e53683d8a54d9cd11f73d0b95c0e0fb7/packages/compiler-core/src/ast.ts#L28</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NodeTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">SIMPLE_EXPRESSION</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/vuejs/core/blob/f5971468e53683d8a54d9cd11f73d0b95c0e0fb7/packages/compiler-core/src/ast.ts#L62</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ElementTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">TEMPLATE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/vuejs/core/blob/f5971468e53683d8a54d9cd11f73d0b95c0e0fb7/packages/shared/src/patchFlags.ts#L19</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> PatchFlags </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">STABLE_FRAGMENT</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transformLazyShow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStructuralDirectiveTransform</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">lazy-show</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  (node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> context) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// forward normal \`v-show\` as-is</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dir.name === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> &amp;</span><span style="color:#A6ACCD;font-style:italic;">amp</span><span style="color:#A6ACCD;">;&amp;</span><span style="color:#A6ACCD;font-style:italic;">amp</span><span style="color:#A6ACCD;">; !dir.modifiers.includes(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    const directiveName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      ? </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">v-show.lazy</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">v-lazy-show</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tagType </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> ElementTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TEMPLATE </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">template</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      throw </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">directiveName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> can not be used on &amp;lt;template&amp;gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ssr </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">inSSR) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// rename \`v-lazy-show\` to \`v-if\` in SSR, and let Vue handles it</span></span>
<span class="line"><span style="color:#A6ACCD;">      node.props.push({</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">exp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createSimpleExpression</span><span style="color:#A6ACCD;">(dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source)</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">modifiers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">modifiers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(i </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; i </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      return</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    const </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> helper </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span></span>
<span class="line"><span style="color:#A6ACCD;">    const keyIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (indexMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    indexMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> keyIndex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    const key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_lazyshow</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">keyIndex</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    const body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createVNodeCall</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      context</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">(FRAGMENT)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      [node]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      PatchFlags</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">STABLE_FRAGMENT</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* isComponent */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    const wrapNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createConditionalExpression</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createCompoundExpression</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_cache.</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> || </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createSequenceExpression</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createCompoundExpression</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_cache.</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> = true</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        body</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      ])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createCallExpression</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">(CREATE_COMMENT)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;v-show-if&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      ])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    ) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceNode</span><span style="color:#A6ACCD;">(wrapNode)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">return</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">!node.codegenNode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">traverseNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// rename \`v-lazy-show\` to \`v-show\` and let Vue handles it</span></span>
<span class="line"><span style="color:#A6ACCD;">      node.props.</span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">modifiers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#A6ACCD;">.</span><span style="color:#A6ACCD;font-style:italic;">modifiers</span><span style="color:#A6ACCD;">.</span><span style="color:#A6ACCD;font-style:italic;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#A6ACCD;"> !== </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><h4 id="createstructuraldirectivetransform" tabindex="-1">createStructuralDirectiveTransform <a class="header-anchor" href="#createstructuraldirectivetransform" aria-label="Permalink to &quot;createStructuralDirectiveTransform&quot;">​</a></h4><p>因为是处理运行时的指令，那么自然用到了 createStructuralDirectiveTransform 这个函数，我们先简单看下其作用：</p><p>createStructuralDirectiveTransform 是一个工厂函数，用于创建一个自定义的 transform 函数，用于在编译过程中处理特定的结构性指令（例如 v-for, v-if, v-else-if, v-else 等）。</p><p>该函数有两个参数：</p><ul><li><p>nameMatcher：一个正则表达式或字符串，用于匹配需要被处理的指令名称。</p></li><li><p>fn：一个函数，用于处理结构性指令。该函数有三个参数：</p><ul><li>node：当前节点对象。</li><li>dir：当前节点上的指令对象。</li><li>context：编译上下文对象，包含编译期间的各种配置和数据。</li></ul></li></ul><p>createStructuralDirectiveTransform 函数会返回一个函数，该函数接收一个节点对象和编译上下文对象，用于根据指定的 nameMatcher 匹配到对应的指令后，调用用户自定义的 fn 函数进行处理。</p><p>在编译过程中，当遇到符合 nameMatcher 的结构性指令时，就会调用返回的处理函数进行处理，例如在本例中，当遇到 v-show 或 v-lazy-show 时，就会调用 transformLazyShow 处理函数进行处理。</p><h4 id="不处理-v-show" tabindex="-1">不处理 v-show <a class="header-anchor" href="#不处理-v-show" aria-label="Permalink to &quot;不处理 v-show&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">amp;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">amp; </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">modifiers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>因为 v-show.lazy 是可以生效的，所以 v-show 会进入该方法，但如果仅仅只是 v-show,而没有 lazy 修饰符，那么实际上不用处理</p><p>这里有个细节，为何要将指令对象 push 进 props，不 push 行不行？</p><p>原先的表现是 v-show 条件为 false 时 display 为 none，渲染了节点，只是不显示：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/587221d289ac43d299d2b2d5c2842243~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p><p>而注释<code>node.props.push(dir)</code>后，看看页面表现咋样：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35a3b326c4374d8f8930aa64ae9da7fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p><p>v-show 的功能没了，也就是说指令的功能会添加到 props 上，所以这里要特别注意，不是单纯的返回 node 即可。后来还有几处node.props.push，原理跟这里一样。</p><h4 id="服务端渲染目前是转为-v-if" tabindex="-1">服务端渲染目前是转为 v-if <a class="header-anchor" href="#服务端渲染目前是转为-v-if" aria-label="Permalink to &quot;服务端渲染目前是转为 v-if&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ssr </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">inSSR) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// rename \`v-lazy-show\` to \`v-if\` in SSR, and let Vue handles it</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    exp</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createSimpleExpression</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#F07178;">    modifiers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">modifiers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#F07178;">; </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>将 v-lazy-show 改名为 v-if，且过滤掉修饰符</p><h4 id="createvnodecall-给原先节点包一层-template" tabindex="-1">createVNodeCall 给原先节点包一层 template <a class="header-anchor" href="#createvnodecall-给原先节点包一层-template" aria-label="Permalink to &quot;createVNodeCall 给原先节点包一层 template&quot;">​</a></h4><p>顾名思义，createVNodeCall 是 用来创建一个 vnode 节点的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createVNodeCall</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 当前的上下文 (context) 对象，即 CodegenContext */</span></span>
<span class="line"><span style="color:#A6ACCD;">      context</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** helper 函数是 Vue 内部使用的帮助函数。FRAGMENT 表示创建 Fragment 节点的 helper 函数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">(FRAGMENT)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 组件的 props */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 当前节点的子节点数组，即包含有指令的节点本身 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      [node]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 表示该节点的 PatchFlag，指明了该节点是否稳定、是否具有一些特定的更新行为等。STABLE_FRAGMENT 表示该 Fragment 节点是一个稳定的节点，即其子节点不会发生改变 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      PatchFlags</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">STABLE_FRAGMENT</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 该节点的动态 keys */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 该节点的模板引用 (ref) */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 表示该节点是否需要开启 Block (块) 模式，即是否需要对其子节点进行优化 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 表示该节点是否是一个 Portal 节点 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 表示该节点是否是一个组件 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* isComponent */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/** 该节点在模板中的位置信息 */</span></span>
<span class="line"><span style="color:#A6ACCD;">      node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>参数含义如下，简单了解即可（反正看了就忘）</p><p>也就是说，其会生成如下模板：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;ExpansiveComponent v-lazy-show=&quot;enabled&quot; msg=&quot;v-lazy-show&quot; /&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><h4 id="关键代码-重点" tabindex="-1">关键代码（重点） <a class="header-anchor" href="#关键代码-重点" aria-label="Permalink to &quot;关键代码（重点）&quot;">​</a></h4><p>接下来这部分是主要原理，请打起十二分精神。</p><p>先在全局维护一个 map，代码中叫 indexMap，是一个 WeakMap（不知道 WeakMap 的可以去了解下）。然后为每一个带有 v-lazy-show 指令的生成一个唯一 key，这里叫做<code>_lazyshow\${keyIndex}</code>，也就是第一个就是_lazyshow1，第二个是_lazyshow2...</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> keyIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (indexMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  indexMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> keyIndex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_lazyshow</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">keyIndex</span><span style="color:#89DDFF;">}\`</span></span></code></pre></div><p>然后将生成的key放到渲染函数的_cache上（渲染函数的第二个参数，<code>function render(_ctx, _cache)</code>），即通过<code>_cache.\${key}</code>作为辅助变量。之后会根据 createConditionalExpression 创建一个条件表达式</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wrapNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createConditionalExpression</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createCompoundExpression</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_cache.</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> || </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exp</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createSequenceExpression</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createCompoundExpression</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_cache.</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> = true</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        body</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      ])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 生成一个注释节点 \`&amp;lt;!--v-show-if--&amp;gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">createCallExpression</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">(CREATE_COMMENT)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;v-show-if&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      ])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>也就是说， v-lazy-show 初始传入的条件为 false 时，那么会为你创建一个注释节点，用来占位：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">createCallExpression</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">helper</span><span style="color:#A6ACCD;">(CREATE_COMMENT)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;v-show-if&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9d60d57c5c441b9a15258c37c42ad2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p><blockquote><p>这个跟 v-if 一样</p></blockquote><p>直到第一次条件为真时，将 <code>_cache.\${key}</code> 置为 true，那么以后的行为就跟 v-show 一致了，上面的 dir.exp 即指令中的条件，如</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;div v-show=&quot;enabled&quot;/&amp;gt;</span></span></code></pre></div><p>enabled 即 exp，表达式的意思。</p><p>readme给出的转换如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;div v-lazy-show=&quot;foo&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Hello</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;/div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><p>会转换为：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fragment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_Fragment</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createCommentVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_createCommentVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createElementBlock</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_createElementBlock</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createElementVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_createElementVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">openBlock</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_openBlock</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vShow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_vShow</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withDirectives</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_withDirectives</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_cache</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">_cache</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_lazyshow1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">_cache</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_lazyshow1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">_openBlock</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">_withDirectives</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">_createElementVNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> Hello </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">512</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* NEED_PATCH */</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">_vShow</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      ])))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">_createCommentVNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">v-show-if</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>你可以简单理解为会将<code>&lt;ExpansiveComponent msg=&quot;v-lazy-show&quot; v-lazy-show=&quot;&quot;enabled&quot;/&gt;</code>转为下面：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-if=&quot;_cache._lazyshow1 || enabled&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;!-- 为true时会把_cache._lazyshow1置为true，那么以后的v-if就用于为true了 --&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent msg=&quot;v-lazy-show&quot; v-lazy-show=&quot;enabled&quot;/&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-else&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;!--v-show-if--&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-if=&quot;_cache._lazyshow2 || enabled&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;!-- 为true时会把_cache._lazyshow2置为true，那么以后的v-if就用于为true了 --&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent msg=&quot;v-lazy-show&quot; v-show.lazy=&quot;enabled&quot;/&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-else&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;!--v-show-if--&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><p>然后将原先节点替换为处理后的 wrapperNode 即可</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceNode</span><span style="color:#A6ACCD;">(wrapNode)</span></span></code></pre></div><h4 id="最后将-v-lazy-show-v-shouw-lazy-处理为-v-show" tabindex="-1">最后将 v-lazy-show | v-shouw.lazy 处理为 v-show <a class="header-anchor" href="#最后将-v-lazy-show-v-shouw-lazy-处理为-v-show" aria-label="Permalink to &quot;最后将 v-lazy-show | v-shouw.lazy 处理为 v-show&quot;">​</a></h4><p>因为 vue 本身是没有 v-lazy-show 的，v-show 也没有 lazy 的的修饰符，那么要让指令生效，就要做到两个：</p><ol><li>将原先的 show-lazy 改名为 show</li><li>过滤掉 lazy 的修饰符</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">modifiers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> dir</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">modifiers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(i </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; i </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>也就变成这样啦：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-if=&quot;_cache._lazyshow1 || enabled&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;!-- 为true时会把_cache._lazyshow1置为true，那么以后的v-if就用于为true了 --&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent msg=&quot;v-lazy-show&quot; v-show=&quot;enabled&quot;/&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-else&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;!--v-show-if--&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-if=&quot;_cache._lazyshow2 || enabled&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;!-- 为true时会把_cache._lazyshow2置为true，那么以后的v-if就用于为true了 --&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;ExpansiveComponent msg=&quot;v-show.lazy&quot; v-show=&quot;enabled&quot;/&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;template v-else&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &amp;lt;!--v-show-if--&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/template&amp;gt;</span></span></code></pre></div><p>小结一下：</p><ol><li><p>为每一个使用 v-lazy-show 分配唯一的 key，放到渲染函数内部的_cache上，即借助辅助变量<code>_cache.\${key}</code></p><ul><li>当初始条件为 falsy 时不渲染节点，只渲染注释节点 <code>&lt;!--v-show-if--&gt;</code></li><li>直到条件为真时将其置为 true，之后的表现就跟 v-show 一致了</li></ul></li></ol><ol start="2"><li>由于 vue 不认识 v-lazy-show，v-show.lazy，使用要将指令改回 v-show，且过滤掉 lazy 修饰符(如果使用 v-show.lazy 的话)</li></ol><h3 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h3><p>以上就是我对该运行时编译插件的认识了，可以将 repo 拉下来，上面有个 playground，可以自己调试调试，说不定有新的认识。</p><p>好了，文章到此为止，你今天学废了吗？</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5751104c3874261bbb00f92d7964c02~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p>`,61);function d(h,u,f,g,v,b){return o(),p("div",null,[t,s("div",c,[r,s("p",null,[a("一开始关注到 antfu 是他的一头长发，毕竟留长发的肯定是技术大佬。果不其然，antfu 是个很高产、很 creative 的大佬，我也很喜欢他写的工具，无论是"),s("a",y,"@antfu/eslint-config",512),a("、"),s("a",D,"unocss",512),a("、还是"),s("a",C,"vitest",512),a("等等。")]),s("p",null,[a("而这篇文章故事的起源是，我今天中午逛 github 的时候发现大佬又又又又开了一个新的 repo（这是家常便饭的事），"),s("a",F,"v-lazy-show",512)]),A,s("p",null,[a("上面的指令作用很好理解，那么其是如何实现的呢？我们看下大佬是怎么做的。具体可见"),s("a",i,"源码",512)]),m])])}const _=l(e,[["render",d]]);export{w as __pageData,_ as default};

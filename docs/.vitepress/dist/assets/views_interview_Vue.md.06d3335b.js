import{_ as e,c as a,o as i,V as o}from"./chunks/framework.f518e559.js";const b=JSON.parse('{"title":"Vue","description":"","frontmatter":{"title":"Vue","config":{"dir":true},"password":true},"headers":[],"relativePath":"views/interview/Vue.md"}'),t={name:"views/interview/Vue.md"},l=o('<h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><h4 id="_1-双向绑定的原理" tabindex="-1">1.双向绑定的原理？ <a class="header-anchor" href="#_1-双向绑定的原理" aria-label="Permalink to &quot;1.双向绑定的原理？&quot;">​</a></h4><p>vue2是通过劫持数据和发布订阅者模式来实现响应式数据的，通过<code>Object.defineProperty</code>来监听数据的<code>getter</code>和<code>setter</code>，当数据改变后，会通知订阅者执行相应的操作。</p><p>但是这种方式也有一些缺陷：</p><p>通过下标修改数组数据或者给对象新增属性，这都不能被监听到，所以就无法触发组件的自动渲染。</p><ul><li><p>为什么监听不了对象？因为<code>vue</code>会在初始化的时候对<code>property</code>进行<code>getter</code>和<code>setter</code>的转换，所以在<code>data</code>对象内存在的属性<code>vue</code>才会转换为响应式数据，对于已经存在的实例，不会动态添加响应式<code>property</code>。</p></li><li><p>为什么监听不了数组？可能是因为性能原因，如果数组特别长的话，监听数组消耗的性能太大，而且<code>vue</code>并不能确定你的数组最终的长度会是多少。</p></li></ul><p>首先要对数据进行劫持监听，所以我们需要设置一个监听器-&gt;Observer&lt;-，用来监听所有属性。如果属性发生变化了，就需要告诉订阅者-&gt;Watcher&lt;-看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器-&gt;Dep&lt;-来专门收集这些订阅者，然后在监听器-&gt;Observer&lt;-和订阅者-&gt;Watcher&lt;-之间进行统一管理。接着，我们还需要有一个指令解析器-&gt;Compile&lt;-，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者-&gt;Watcher&lt;-，并替换模板数据或者绑定相应的函数，此时当订阅者-&gt;Watcher&lt;-接收到相应属性的变化，就会执行对应的更新函数，从而更新视图</p><p>observer：作用就是数据劫持，把data内的对象，传入并且利用<code>Object.defineProperty</code>来劫持数据get、set</p><p>dep：由于监听器和订阅者是一对多的关系,所以这里设计了一个管理中心,来管理某个监听器及其对应的订阅者的关系, 消息调度和依赖管理都靠它</p><p>watcher：当某个监听器监听到数据发生变化的时候，这个变化经过消息调度中心，最终会传递到所有该监听器对应的订阅者身上，然后这些订阅者分别执行自身的业务回调即可</p><p>compiler：编译模板，处理文本节点和元素节点</p><p>-&gt;v-model&lt;-其实就是，-&gt;v-on&lt;-和-&gt;v-bind&lt;-的语法糖。</p><blockquote><p>双向绑定的作用是：数据和视图相互驱动更新，是相互影响的关系</p></blockquote><h4 id="_2-vue2的生命周期是怎么样的" tabindex="-1">2.vue2的生命周期是怎么样的？ <a class="header-anchor" href="#_2-vue2的生命周期是怎么样的" aria-label="Permalink to &quot;2.vue2的生命周期是怎么样的？&quot;">​</a></h4><p>beforeCreated =&gt; created =&gt; beforeMounted =&gt; mounted =&gt; beforeUpdated =&gt; updated =&gt; beforeDestroy =&gt; destroyed</p><p>如果该组件写了 keep-alive ，那么还会有 activated、deactivated生命周期</p><p>activated：在组件激活时调用，使用keep-alive进行缓存，又希望每次切换组件的时候更新数据，就可以使用这个生命周期 deactivated：keep-alive组件被停用时</p><h4 id="_3-接口调用会放在哪个生命周期-为什么" tabindex="-1">3.接口调用会放在哪个生命周期？为什么？ <a class="header-anchor" href="#_3-接口调用会放在哪个生命周期-为什么" aria-label="Permalink to &quot;3.接口调用会放在哪个生命周期？为什么？&quot;">​</a></h4><p>一般会放在<code>created</code>周期内，能更快的获取到数据渲染视图， 但是也可以放到<code>mounted</code>周期内，如果涉及到DOM操作，就需要放到<code>mounted</code>周期内，因为在<code>mounted</code>后，虚拟<code>DOM</code>才会被真实<code>DOM</code>替换，才能拿到真实的<code>DOM</code>树。</p><h4 id="_4-v-model是怎么实现的" tabindex="-1">4.v-model是怎么实现的 <a class="header-anchor" href="#_4-v-model是怎么实现的" aria-label="Permalink to &quot;4.v-model是怎么实现的&quot;">​</a></h4><p>源码分为三步，首先将表达式指向的-&gt;value(例如data.a)&lt;-绑定-&gt;Watcher&lt;-，再获取这个表达式指向的值赋值给-&gt;DOM&lt;-，然后绑定-&gt;input&lt;-事件，当“输入框”值改变时改变表达式指向的-&gt;value(例如data.a)&lt;-</p><h4 id="_5-v-show和v-if的区别" tabindex="-1">5.v-show和v-if的区别 <a class="header-anchor" href="#_5-v-show和v-if的区别" aria-label="Permalink to &quot;5.v-show和v-if的区别&quot;">​</a></h4><p>作用其实是差不多的，展示效果是一样的，都是隐藏元素</p><p>-&gt;v-show&lt;-是控制元素的-&gt;display:none&lt;-，但是-&gt;dom&lt;-元素依旧会渲染</p><p>-&gt;v-if&lt;-是真正的会销毁元素，会完整的执行一个生命周期，在源码中其实就是给这个对象打上标记，生成-&gt;vnode&lt;-时候会忽略此元素</p><h4 id="_6-v-if和v-for为什么不能同时使用" tabindex="-1">6.v-if和v-for为什么不能同时使用 <a class="header-anchor" href="#_6-v-if和v-for为什么不能同时使用" aria-label="Permalink to &quot;6.v-if和v-for为什么不能同时使用&quot;">​</a></h4><p>因为v-for优先级比v-if高，这样就会判断很多次v-if造成性能浪费</p><h4 id="_7-vue插槽有哪些类型" tabindex="-1">7.vue插槽有哪些类型 <a class="header-anchor" href="#_7-vue插槽有哪些类型" aria-label="Permalink to &quot;7.vue插槽有哪些类型&quot;">​</a></h4><ul><li>默认插槽</li><li>命名插槽</li><li>作用域插槽，就是父组件可以使用插槽组件传过来的参数以及数据（el-table slot-scope）</li></ul><h4 id="_8-vue插槽的原理" tabindex="-1">8.vue插槽的原理 <a class="header-anchor" href="#_8-vue插槽的原理" aria-label="Permalink to &quot;8.vue插槽的原理&quot;">​</a></h4><p>vue组件实例化顺序为：父组件状态初始化(data、computed、watch...) --&gt; 模板编译 --&gt; 生成render方法 --&gt; 实例化渲染watcher --&gt; 调用render方法，生成VNode --&gt; patch VNode，转换为真实DOM --&gt; 实例化子组件 --&gt; ......重复相同的流程 --&gt; 子组件生成的真实DOM挂载到父组件生成的真实DOM上，挂载到页面中 --&gt; 移除旧节点</p><p>因为vue的组件实例化的顺序是由父组件=&gt;子组件，所以能够提前获得父组件的插槽内容，然后当实例化子组件时，就将这部分内容连接起来</p><h4 id="_9-mixins遇到和组件内的函数相同名称会怎么样呢" tabindex="-1">9.mixins遇到和组件内的函数相同名称会怎么样呢？ <a class="header-anchor" href="#_9-mixins遇到和组件内的函数相同名称会怎么样呢" aria-label="Permalink to &quot;9.mixins遇到和组件内的函数相同名称会怎么样呢？&quot;">​</a></h4><p>组件内的函数会覆盖mixins定义的函数</p><h4 id="_10-如何优化项目" tabindex="-1">10.如何优化项目？ <a class="header-anchor" href="#_10-如何优化项目" aria-label="Permalink to &quot;10.如何优化项目？&quot;">​</a></h4><p>（1）编码阶段</p><ul><li>尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher</li><li>v-if和v-for不能连用</li><li>如果需要使用v-for给每项元素绑定事件时使用事件代理</li><li>SPA 页面采用keep-alive缓存组件</li><li>在更多的情况下，使用v-if替代v-show</li><li>key保证唯一</li><li>使用路由懒加载、异步组件</li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ul><p>（2）SEO优化</p><ul><li>预渲染</li><li>服务端渲染SSR</li></ul><p>（3）打包优化</p><ul><li>压缩代码</li><li>Tree Shaking/Scope Hoisting</li><li>使用cdn加载第三方模块</li><li>多线程打包happypack</li><li>splitChunks抽离公共文件</li><li>sourceMap优化</li></ul><p>（4）用户体验</p><ul><li>骨架屏</li><li>PWA</li><li>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。</li></ul><h4 id="_11-说一说服务端渲染" tabindex="-1">11.说一说服务端渲染？ <a class="header-anchor" href="#_11-说一说服务端渲染" aria-label="Permalink to &quot;11.说一说服务端渲染？&quot;">​</a></h4><p>服务端渲染就是指再服务端完成dom结构与数据的拼接，发送给浏览器绑定事件和状态</p><h4 id="_12-为什么data-是一个函数" tabindex="-1">12.为什么data()是一个函数？ <a class="header-anchor" href="#_12-为什么data-是一个函数" aria-label="Permalink to &quot;12.为什么data()是一个函数？&quot;">​</a></h4><p>避免变量污染，防止多个组件实例对象之间共用一个data，那其实这个就是利用了闭包。</p><h4 id="_13-scoped-原理" tabindex="-1">13.scoped 原理？ <a class="header-anchor" href="#_13-scoped-原理" aria-label="Permalink to &quot;13.scoped 原理？&quot;">​</a></h4><p>scoped 会在 DOM 结构及 css 样式上加上唯一性的标记 -&gt;data-v-xxx&lt;- 属性，从而达到样式私有化，不污染全局的作用；</p><h4 id="_14-大致讲一下vue的响应式思想" tabindex="-1">14.大致讲一下vue的响应式思想？ <a class="header-anchor" href="#_14-大致讲一下vue的响应式思想" aria-label="Permalink to &quot;14.大致讲一下vue的响应式思想？&quot;">​</a></h4><p>就是利用track函数把被监听的对象以及对象改变后需要执行的操作函数，收集依赖到一个dep对象中，这个dep对象是个Set，因为可以自动去重，当监听的对象改变时，就执行trigger函数，通知所有依赖中的函数执行</p><p>存储的dep对象逻辑是这样的</p><img src="https://cdn.chenyingshuang.cn/interview/vue/1.jpg"><h4 id="_15-vue-mixin的原理" tabindex="-1">15.vue mixin的原理？ <a class="header-anchor" href="#_15-vue-mixin的原理" aria-label="Permalink to &quot;15.vue mixin的原理？&quot;">​</a></h4><p>原理就是根据不同策略来进行合并对象操作</p><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><h4 id="_1-双向绑定的原理-1" tabindex="-1">1.双向绑定的原理？ <a class="header-anchor" href="#_1-双向绑定的原理-1" aria-label="Permalink to &quot;1.双向绑定的原理？&quot;">​</a></h4><p>会采用-&gt;Proxy&lt;-来实现数据劫持，-&gt;Proxy&lt;-的监听是深层次的，监听整个对象，而不是某个属性。</p><p>优点是能规避Object.defineProperty的问题：</p><p>深度监听，性能更好，vue2是一次性递归遍历所有，vue3是在set属性时，才做递归处理 可监听对象 新增、删除 操作 可监听数组变化</p><h4 id="_2-vue2与vue3的区别" tabindex="-1">2.vue2与vue3的区别 <a class="header-anchor" href="#_2-vue2与vue3的区别" aria-label="Permalink to &quot;2.vue2与vue3的区别&quot;">​</a></h4><ul><li>1.双向绑定原理变化 相比于vue2.x，使用proxy的优势如下</li></ul><p>defineProperty只能监听某个属性，不能对全对象监听 可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可） 可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化</p><ul><li>2.Composition API</li><li>3.生命周期变化</li><li>4.vue3 Teleport瞬移组件</li><li>5.编程思想的变化，vue3是函数式编程，更符合一个程序员的习惯吧，而且函数也有着扩展性更强，复用性更强的优点</li></ul><h4 id="_3-vue3的diff算法对比vue2的优化" tabindex="-1">3.vue3的diff算法对比vue2的优化 <a class="header-anchor" href="#_3-vue3的diff算法对比vue2的优化" aria-label="Permalink to &quot;3.vue3的diff算法对比vue2的优化&quot;">​</a></h4><p>添加静态标记，就是把各类情况打上标记 比如说一个静态节点 = -1</p><p>那么在diff的时候就会跳过标记为-1的对比</p><p>算法优化，vue3利用了最长递增子序列的方法减少DOM移动</p><h3 id="vuex-pinia" tabindex="-1">Vuex/Pinia <a class="header-anchor" href="#vuex-pinia" aria-label="Permalink to &quot;Vuex/Pinia&quot;">​</a></h3><h4 id="_1-说一说vuex是什么-有哪些属性" tabindex="-1">1.说一说Vuex是什么？有哪些属性？ <a class="header-anchor" href="#_1-说一说vuex是什么-有哪些属性" aria-label="Permalink to &quot;1.说一说Vuex是什么？有哪些属性？&quot;">​</a></h4><p><code>Vuex</code>是全局状态管理仓库</p><ul><li>state:数据源</li><li>mutations:同步处理事件</li><li>actions:异步处理事件</li><li>getter:过滤器</li><li>module:模块</li></ul><h4 id="_2-pinia是什么-和vuex有什么区别" tabindex="-1">2.Pinia是什么，和vuex有什么区别？ <a class="header-anchor" href="#_2-pinia是什么-和vuex有什么区别" aria-label="Permalink to &quot;2.Pinia是什么，和vuex有什么区别？&quot;">​</a></h4><p><code>Pinia</code>其实就是<code>Vuex</code>的升级版本，5.0版本</p><ul><li>简化了状态处理，没有了<code>mutations</code>，只保留了<code>actions</code>，所以说同步/异步处理事件都放在了<code>actions</code>里面</li><li>代码简洁明了</li><li>不再有<code>module</code>式嵌套结构，你可以在<code>store</code>中导入另一个<code>store</code>来隐式嵌套</li><li>更加支持<code>ts</code></li><li>更加轻量化，包体才只有1kb左右</li></ul><h4 id="_3-vuex的原理" tabindex="-1">3.vuex的原理？ <a class="header-anchor" href="#_3-vuex的原理" aria-label="Permalink to &quot;3.vuex的原理？&quot;">​</a></h4><p>利用了全局混入Mixin，将你所创建的store对象，混入到每一个Vue实例中</p><h4 id="怎么解决pinia的持久化问题" tabindex="-1">怎么解决Pinia的持久化问题？ <a class="header-anchor" href="#怎么解决pinia的持久化问题" aria-label="Permalink to &quot;怎么解决Pinia的持久化问题？&quot;">​</a></h4><p>安装持久化插件 <code>pinia-plugin-persistedstate</code></p><p>本质其实就是利用了<code>localStorage</code>来实现持有化</p><h3 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;vue-router&quot;">​</a></h3><h4 id="_1-vue-router路由守卫" tabindex="-1">1.vue-router路由守卫 <a class="header-anchor" href="#_1-vue-router路由守卫" aria-label="Permalink to &quot;1.vue-router路由守卫&quot;">​</a></h4><p>其实就是路由跳转过程中的一些钩子函数，再直白点就是路由跳转是一个大的过程，这些大的过程分为路由前中后等等些小的过程，在这些小的过程中都有对应的函数，这些函数定义了做一些事情的时机，这就是导航守卫。</p><h5 id="全局守卫" tabindex="-1">全局守卫 <a class="header-anchor" href="#全局守卫" aria-label="Permalink to &quot;全局守卫&quot;">​</a></h5><ul><li>全局前置守卫beforeEach</li><li>全局解析守卫beforeResolve</li><li>全局后置钩子afterEach</li></ul><h5 id="路由独享的守卫" tabindex="-1">路由独享的守卫 <a class="header-anchor" href="#路由独享的守卫" aria-label="Permalink to &quot;路由独享的守卫&quot;">​</a></h5><p>指在单个路由配置的时候也可以设置的钩子函数</p><ul><li>beforeEnter</li></ul><h5 id="组件内的守卫" tabindex="-1">组件内的守卫 <a class="header-anchor" href="#组件内的守卫" aria-label="Permalink to &quot;组件内的守卫&quot;">​</a></h5><ul><li>beforeRouteEnter 在渲染该组件的对应路由被 confirm 前调用</li><li>beforeRouteUpdate 在当前路由改变，但是该组件被复用时调用</li><li>beforeRouteLeave 导航离开该组件的对应路由时调用</li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><h4 id="_1-说一说-vue-列表为什么加-key" tabindex="-1">1.说一说 Vue 列表为什么加 key？ <a class="header-anchor" href="#_1-说一说-vue-列表为什么加-key" aria-label="Permalink to &quot;1.说一说 Vue 列表为什么加 key？&quot;">​</a></h4><p>便于<code>diff</code>，操作更准确，优化性能。</p><h4 id="_2-谈一下mvvm" tabindex="-1">2.谈一下MVVM？ <a class="header-anchor" href="#_2-谈一下mvvm" aria-label="Permalink to &quot;2.谈一下MVVM？&quot;">​</a></h4><p><code>MVVM</code>其实是一种设计思想，模型-视图-视图模型</p><p>实现了<code>view</code>层和<code>model</code>层的自动同步，当<code>model</code>数据改变时，不需要自己手动去操作<code>DOM</code></p><p><code>react</code>不是<code>MVVM</code>，因为没有实现双向绑定，需要用户去手动提交数据，重新渲染<code>DOM</code></p><h4 id="_3-mvvm和mvc的区别" tabindex="-1">3.MVVM和MVC的区别 <a class="header-anchor" href="#_3-mvvm和mvc的区别" aria-label="Permalink to &quot;3.MVVM和MVC的区别&quot;">​</a></h4><p><code>MVVM</code>主要的特性其实就是双向绑定当<code>m</code>层数据修改，<code>vm</code>层会监听到数据变化，自动通知到<code>v</code>层进行相应操作</p><p><code>MVC</code>的设计思想就是把数据与视图层分离，但是还是需要有大量的DOM操作，这会影响到页面的渲染性能，降低用户体验</p><h4 id="_4-vue的-nexttick原理是什么-作用是什么" tabindex="-1">4.vue的$nextTick原理是什么？作用是什么？ <a class="header-anchor" href="#_4-vue的-nexttick原理是什么-作用是什么" aria-label="Permalink to &quot;4.vue的$nextTick原理是什么？作用是什么？&quot;">​</a></h4><p>由于<code>vue</code>的<code>DOM</code>更新是异步的，所以当数据发生变化时，<code>DOM</code>并不会立即更新，而是会等到事件循环后统一更新（微任务，但实际上不同vue版本是不同的）。其实<code>$nextTick</code>本质上就是一个<code>promise</code></p><p>作用：在<code>$nextTick</code>函数体内的代码会在<code>DOM</code>更新后再执行，这样就可以拿到最新的<code>DOM</code>。</p><h4 id="_4-组件库是如何维护的" tabindex="-1">4.组件库是如何维护的？ <a class="header-anchor" href="#_4-组件库是如何维护的" aria-label="Permalink to &quot;4.组件库是如何维护的？&quot;">​</a></h4><p>自己的组件库呢其实相当于对element-ui或者ant的二次封装。结合业务的使用场景来进行封装</p><p>升级后要确保向下兼容，意思就是说旧版本的不更新也能够正常使用。</p><p>那由于我其实是一个人在开发前端，所以说其实代码规范也完全是按照我个人习惯来制定了，当然我也是尽量去遵守自己制定的一些规则，这样起码自己看起来不会特别乱。</p><h4 id="_5-团队开发-代码管理" tabindex="-1">5.团队开发？代码管理？ <a class="header-anchor" href="#_5-团队开发-代码管理" aria-label="Permalink to &quot;5.团队开发？代码管理？&quot;">​</a></h4><p>分支就是： 开发环境 测试环境 生产环境</p><p>利用gitlab的钩子实现自动打包，自动部署。这其实就是前端工程化的东西。</p><p>利用node去写接口测试，去监听页面报错等等，利用插件去打开浏览器页面，然后执行某些操作来看看可能会出现问题的元素会不会正常显示之类的。</p><h4 id="_6-如何优化项目" tabindex="-1">6.如何优化项目？ <a class="header-anchor" href="#_6-如何优化项目" aria-label="Permalink to &quot;6.如何优化项目？&quot;">​</a></h4><ul><li>v-if和v-show区分使用场景</li><li>computed和watch区分使用场景，computed是有缓存的，所有依赖其他值进行计算的时候效率会比较高，我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch</li><li>v-for加key</li><li>长列表优化（虚拟滚动）、懒加载</li><li>图片资源懒加载</li><li>路由懒加载</li><li>插件按需引入</li></ul><h4 id="_7-比较引以为傲的组件" tabindex="-1">7.比较引以为傲的组件 <a class="header-anchor" href="#_7-比较引以为傲的组件" aria-label="Permalink to &quot;7.比较引以为傲的组件&quot;">​</a></h4><p>日期选择器,可以实现n种模式的切换,比如选择年月日周这几个周期</p>',115),r=[l];function d(c,u,h,n,p,s){return i(),a("div",null,r)}const f=e(t,[["render",d]]);export{b as __pageData,f as default};

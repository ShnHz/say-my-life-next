import{_ as e,c as a,o,V as d}from"./chunks/framework.f518e559.js";const f=JSON.parse('{"title":"Node","description":"","frontmatter":{"title":"Node","config":{"dir":true},"password":true},"headers":[],"relativePath":"views/interview/Node.md"}'),i={name:"views/interview/Node.md"},t=d('<h3 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h3><h4 id="什么是nodejs" tabindex="-1">什么是nodejs <a class="header-anchor" href="#什么是nodejs" aria-label="Permalink to &quot;什么是nodejs&quot;">​</a></h4><p>Node是一个基于 Chrome v8引擎的服务器端 JavaScript运行环境，是一个服务器端的“ JavaScript解释器”，用于方便高效地搭建一些响应速度快、易于扩展的网络应用。它采用事件驱动、异步编程方式，为网络服务而设计。</p><h4 id="node-bff层是什么" tabindex="-1">node BFF层是什么？ <a class="header-anchor" href="#node-bff层是什么" aria-label="Permalink to &quot;node BFF层是什么？&quot;">​</a></h4><p><code>BFF</code>其实就是一个网关的概念，<code>node</code>里面的<code>BFF</code>实际上的作用就是 “接口聚合”</p><p>就是对请求进行转发，对数据进行格式化等等操作。</p><p>业务会更向前端靠拢，琐碎的api就由前端自己决定即可，后端只需要提供粗粒度的一些接口。</p><h4 id="你用node做过什么事情" tabindex="-1">你用node做过什么事情？ <a class="header-anchor" href="#你用node做过什么事情" aria-label="Permalink to &quot;你用node做过什么事情？&quot;">​</a></h4><ul><li>写cli</li><li>接口封装</li><li>接口自动化测试</li><li>文件处理（工具）</li><li>写过爬虫（玩一玩）</li></ul><h4 id="谈谈栈和堆的区别" tabindex="-1">谈谈栈和堆的区别 <a class="header-anchor" href="#谈谈栈和堆的区别" aria-label="Permalink to &quot;谈谈栈和堆的区别&quot;">​</a></h4><p>栈（stack）区由编译器自动分配和释放，存放函数的参数值、局部变量的值等。</p><p>堆（heap）区一般由程序员分配和释放，若程序员不释放，程序结束时可能由OS回收。</p><h5 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h5><p>堆（数据结构）可以被看成一棵树，如堆排序</p><p>栈（数据结构）是一种先进后出的数据结构</p><h4 id="node环境与浏览器环境有哪些区别" tabindex="-1">node环境与浏览器环境有哪些区别 <a class="header-anchor" href="#node环境与浏览器环境有哪些区别" aria-label="Permalink to &quot;node环境与浏览器环境有哪些区别&quot;">​</a></h4><ul><li>全局this指向：node指向global，浏览器指向window</li><li>模块引用：node使用require()，浏览器遵循ES规范，可以使用import</li><li>API不同：node环境是没有DOM操作的，因为没有DOM，包括一些浏览器提供的方法也无法使用</li></ul><h4 id="node和浏览器在事件循环上有什么区别" tabindex="-1">node和浏览器在事件循环上有什么区别 <a class="header-anchor" href="#node和浏览器在事件循环上有什么区别" aria-label="Permalink to &quot;node和浏览器在事件循环上有什么区别&quot;">​</a></h4><p>node在执行宏任务的时候，会把所有可执行的宏任务执行完成，浏览器总是微任务优先</p>',19),n=[t];function r(l,s,h,c,p,u){return o(),a("div",null,n)}const b=e(i,[["render",r]]);export{f as __pageData,b as default};

import{_ as s,c as n,o as a,V as l}from"./chunks/framework.f518e559.js";const C=JSON.parse('{"title":"两行CSS让页面提升了近7倍渲染性能！","description":"","frontmatter":{"title":"两行CSS让页面提升了近7倍渲染性能！","date":"2022/12/14 20:23:25","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["css","info"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen.md"}'),o={name:"views/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen.md"},p=l(`<h6 id="原文-掘金" tabindex="-1">原文 <a href="https://juejin.cn/post/7168629736838463525" target="_blank" rel="noreferrer">掘金</a> <a class="header-anchor" href="#原文-掘金" aria-label="Permalink to &quot;原文 [掘金](https://juejin.cn/post/7168629736838463525)&quot;">​</a></h6><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>对于前端人员来讲，最令人头疼的应该就是页面性能了，当用户在访问一个页面时，总是希望它能够快速呈现在眼前并且是可交互状态。如果页面加载过慢，你的用户很可能会因此离你而去。所以页面性能对于前端开发者来说可谓是重中之重，其实你如果了解页面从加载到渲染完成的整个过程，就知道应该从哪方面下手了。</p><p>嗯，不要跑偏了，今天我们主要来研究长列表页面的渲染性能</p><p>现如今的页面越来越复杂，一个页面往往承载着大量的元素，最常见的就是一些电商页面，数以万计的商品列表是怎么保证渲染不卡顿的，大家在面对这种长列表渲染的场景下，一般都会采用分页或者虚拟列表来减缓页面一次性渲染的压力，但这些方式都需要配合JS来时实现，那么有没有仅使用CSS就能够实现的方案呢？</p><p>答案是有的，它就是我们今天的主角 —— 内容可见性（content-visibility）</p><h3 id="content-visibility" tabindex="-1">content-visibility <a class="header-anchor" href="#content-visibility" aria-label="Permalink to &quot;content-visibility&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">content-visibility</p><p>是CSS新增的属性，主要用来提高页面渲染性能，它可以控制一个元素是否渲染其内容，并且允许浏览器跳过这些元素的布局与渲染。</p><ul><li>-&gt;visible&lt;-：默认值，没有效果。元素的内容被正常布局和呈现。</li><li>-&gt;hidden&lt;-：元素跳过它的内容。跳过的内容不能被用户代理功能访问，例如在页面中查找、标签顺序导航等，也不能被选择或聚焦。这类似于给内容设置-&gt;display: none&lt;-。</li><li>-&gt;auto&lt;-：该元素打开布局包含、样式包含和绘制包含。如果该元素与用户不相关，它也会跳过其内容。与 -&gt;hidden&lt;- 不同，跳过的内容必须仍可正常用于用户代理功能，例如在页面中查找、tab 顺序导航等，并且必须正常可聚焦和可选择。</li></ul></div><h4 id="content-visibility-hidden-手动管理可见性" tabindex="-1">content-visibility: hidden 手动管理可见性 <a class="header-anchor" href="#content-visibility-hidden-手动管理可见性" aria-label="Permalink to &quot;content-visibility: hidden 手动管理可见性&quot;">​</a></h4><p>上面说到-&gt;content-visibility: hidden&lt;-的效果与-&gt;display: none&lt;-类似，但其实两者还是有比较大的区别的：</p><ul><li>-&gt;content-visibility: hidden&lt;- 只是隐藏了子元素，自身不会被隐藏</li><li>-&gt;content-visibility: hidden&lt;- 隐藏内容的渲染状态会被缓存，所以当它被移除或者设为可见时，浏览器不会重新渲染，而是会应用缓存，所以对于需要频繁切换显示隐藏的元素，这个属性能够极大地提高渲染性能。</li></ul><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/1.jpg"><p>从这上面我们可以看到，添加了-&gt;content-visibility: hidden&lt;-元素的子元素确实是没有渲染，但它自身是会渲染的！</p><h4 id="content-visibility-auto-跳过渲染工作" tabindex="-1">content-visibility: auto 跳过渲染工作 <a class="header-anchor" href="#content-visibility-auto-跳过渲染工作" aria-label="Permalink to &quot;content-visibility: auto 跳过渲染工作&quot;">​</a></h4><p>我们仔细想想，页面上虽然会有很多元素，但是它们会同时呈现在用户眼前吗，很显然是不会的，用户每次能够真实看到就只有设备可见区那些内容，对于非可见区的内容只要页面不发生滚动，用户就永远看不到。虽然用户看不到，但浏览器却会实实在在的去渲染，以至于浪费大量的性能。所以我们得想办法让浏览器不渲染非可视区的内容就能够达到提高页面渲染性能的效果。</p><p>我们上面说到的虚拟列表原理其实就跟这个类似，在首屏加载时，只加载<strong>可视区</strong>的内容，当页面发生滚动时，动态通过计算获得<strong>可视区</strong>的内容，并将<strong>非可视区</strong>的内容进行删除，这样就能够大大提高长列表的渲染性能。</p><p>但这个需要配合JS才能实现，现在我们可以使用CSS中-&gt;content-visibility: auto&lt;-，它可以用来跳过屏幕外的内容渲染，对于这种有大量离屏内容的长列表，可以大大减少页面渲染时间。</p><p>我们将上面的例子稍微改改：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card_item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card_inner</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book.bookCover</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_cover</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card_item_right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ \`\${book.bookName}\${index + 1}\` }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ book.catlog }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_tags</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_tag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(item, index) in book.tags</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            {{ item }}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book_desc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          {{ book.desc }}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toRefs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">book</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> book</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#A6ACCD;">(props)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">less</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">card_item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">content-visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">*/</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>首先是没有添加-&gt;content-visibility: auto&lt;-的效果，无论这些元素是否在可视区，都会被渲染</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/2.jpg"><p>如果我们在平常业务中这样写，用户进入到这个页面可能就直接口吐芬芳了，为了性能考虑，我们为每一个列表项加上：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">card_item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  content-visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个时候我们再来看下效果：</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/3.jpg"><p>从第<strong>10</strong>个开始，这些没在可视区的元素就没有被渲染，这可比上面那种全部元素都渲染好太多了，但是如果浏览器不渲染页面内的一些元素，滚动将是一场噩梦，因为无法正确计算页面高度。这是因为，-&gt;content-visibility&lt;-会将分配给它的元素的高度-&gt;（height）&lt;-视为-&gt;0&lt;-，浏览器在渲染之前会将这个元素的高度变为-&gt;0&lt;-，从而使我们的页面高度和滚动变得混乱。</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/4.gif"><p>这里我们可以看到页面上的滚动条会出现抖动现象，这是因为可视区外的元素只有出现在了可视区才会被渲染，这就回导致前后页面高度会发生变化，从而出现滚动条的诡异抖动现象，这是虚拟列表基本都会存在的问题。</p><blockquote><p>注意：当元素接近视口时，浏览器不再添加-&gt;size&lt;-容器并开始绘制和命中测试元素的内容。这使得渲染工作能够及时完成以供用户查看。</p></blockquote><p>这也是为什么上面我们看到的是从第十个才开始不渲染子元素，因为它需要一个缓冲区以便浏览器能够在页面发生滚动时及时渲染呈现在用户眼前。</p><p>上面提到的-&gt;size&lt;-其实是一种 <code>CSS</code> 属性的潜在值-&gt;contain&lt;-，它指的是元素上的大小限制确保元素的框可以在不需要检查其后代的情况下进行布局。这意味着如果我们只需要元素的大小，我们可以跳过后代的布局。</p><h4 id="contain-intrinsic-size-救场" tabindex="-1">contain-intrinsic-size 救场 <a class="header-anchor" href="#contain-intrinsic-size-救场" aria-label="Permalink to &quot;contain-intrinsic-size 救场&quot;">​</a></h4><p>页面在滚动过程中滚动条一直抖动，这是一个不能接受的体验问题，为了更好地实现-&gt;content-visibility&lt;-，浏览器需要应用 -&gt;size containment&lt;- 以确保内容的渲染结果不会以任何方式影响元素的大小。这意味着该元素将像空的一样布局。如果元素没有在常规块布局中指定的高度，那么它将是 -&gt;0&lt;- 高度。</p><p>这个时候我们可以使用-&gt;contain-intrinsic-size&lt;-来指定的元素自然大小，确保我们未渲染子元素的 -&gt;div&lt;- 仍然占据空间，同时也保留延迟渲染的好处。</p><h5 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h5><p>此属性是以下 CSS 属性的简写：</p><ul><li>-&gt;contain-intrinsic-width&lt;-</li><li>-&gt;contain-intrinsic-height&lt;-</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* Keyword values */</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-width</span><span style="color:#A6ACCD;">: none;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* &lt;length&gt; values */</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-size</span><span style="color:#A6ACCD;">: 1000px;</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-size</span><span style="color:#A6ACCD;">: 10rem;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* width | height */</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-size</span><span style="color:#A6ACCD;">: 1000px 1.5em;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* auto &lt;length&gt; */</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-size</span><span style="color:#A6ACCD;">: auto 300px;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* auto width | auto height */</span></span>
<span class="line"><span style="color:#FFCB6B;">contain-intrinsic-size</span><span style="color:#A6ACCD;">: auto 300px auto 4rem;</span></span></code></pre></div><blockquote><p>-&gt;contain-intrinsic-size&lt;- 可以为元素指定以下一个或两个值。如果指定了两个值，则第一个值适用于宽度，第二个值适用于高度。如果指定单个值，则它适用于宽度和高度。</p></blockquote><h5 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h5><p>我们只需要给添加了-&gt;content-visibility: auto&lt;-的元素添加上-&gt;contain-intrinsic-size&lt;-就能够解决滚动条抖动的问题，当然，这个高度约接近真实渲染的高度，效果会越好，如果实在无法知道准确的高度，我们也可以给一个大概的值，也会使滚动条的问题相对减少。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">card_item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  content-visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  contain-intrinsic-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/5.jpg"><p>之前没添加-&gt;contain-intrinsic-size&lt;-属性时，可视区外的元素高度都是0，现在这些元素高度都是我们设置的-&gt;contain-intrinsic-size&lt;-的值，这样的话整个页面的高度就是不会发生变化（或者说变化很小），从而页面滚动条也不会出现抖动问题（或者说抖动减少）</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/6.gif"><h3 id="性能对比" tabindex="-1">性能对比 <a class="header-anchor" href="#性能对比" aria-label="Permalink to &quot;性能对比&quot;">​</a></h3><p>上面说了这么多，-&gt;content-visibility&lt;-是否真的能够提高页面的渲染性能呢，我们来实际对比看看：</p><p>首先是没有-&gt;content-visibility&lt;-的页面渲染</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/7.jpg"><p>然后是有-&gt;content-visibility&lt;-的页面渲染</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/8.jpg"><p>上面是用1000个列表元素进行测试的，有-&gt;content-visibility&lt;-的页面渲染花费时间大概是<strong>37ms</strong>，而没有-&gt;content-visibility&lt;-的页面渲染花费时间大概是<strong>269ms</strong>，提升了足足有7倍之多！！！</p><p><strong>对于列表元素更多的页面，-&gt;content-visibility&lt;-带来的渲染性能提升会更加明显。</strong></p><h3 id="思考🤔" tabindex="-1">思考🤔 <a class="header-anchor" href="#思考🤔" aria-label="Permalink to &quot;思考🤔&quot;">​</a></h3><h4 id="能否减小页面的内存占用" tabindex="-1">能否减小页面的内存占用？ <a class="header-anchor" href="#能否减小页面的内存占用" aria-label="Permalink to &quot;能否减小页面的内存占用？&quot;">​</a></h4><p>之前有同学问到了-&gt;content-visibility: auto&lt;-是否会减少页面内存的占用，这个我们可以查看下使用前后页面所占用内存的大小是否有变化。</p><p>我们可以通过chrome浏览器 <strong>设置 --&gt; 更多工具 --&gt; 任务管理器</strong> 查看页面占用内存大小。</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/9.jpg"><p>首先是没有-&gt;content-visibility: auto&lt;-，页面占用内存大概为96.2MB</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/10.jpg"><p>然后是添加了-&gt;content-visibility: auto&lt;-，页面占用内存仍然是96.2MB</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/11.jpg"><p>也就是说，它并不会减少页面占用内存大小，这些元素是真实存在于DOM树中的，并且我们也可以通过JS访问到</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/12.jpg"><h4 id="是否会影响脚本的加载行为" tabindex="-1">是否会影响脚本的加载行为？ <a class="header-anchor" href="#是否会影响脚本的加载行为" aria-label="Permalink to &quot;是否会影响脚本的加载行为？&quot;">​</a></h4><p>如果我们在添加了-&gt;content-visibility: auto&lt;-的元素内去加载脚本，并且此时的元素处于一个不可见的状态，那么此时元素内的脚本能够正常加载呢？</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- ... 第十二个 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">visibility_item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">inner</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            测试脚本</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../../../../images/22-11/content-s1.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">            &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./2.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/13.jpg"><p>很明显它并不会影响脚本与图片的加载行为，并且脚本再加载后能够正常执行。结合上面第一点，我们可以得出结论，使用了-&gt;content-visibility: auto&lt;-的元素影响的只是子元素的渲染，对于内部静态资源的加载还是正常进行。</p><p>但我们需要注意的是脚本的执行时机，如果要获取DOM元素的话，此时的脚本只能获取到它加载位置之前的DOM元素，而与它自身DOM有没有渲染无关！</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">测试脚本</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第十一个</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.visibility_item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第十三个</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.visibility_item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">])</span></span></code></pre></div><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/14.jpg"><h4 id="可访问性" tabindex="-1">可访问性 <a class="header-anchor" href="#可访问性" aria-label="Permalink to &quot;可访问性&quot;">​</a></h4><p>使用了-&gt;content-visibility: auto&lt;- 并且在非可视区的元素是否存在于可访问树中？</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/15.jpg"><p>这里我们可以看出-&gt;content-visibility: auto&lt;-是屏幕外的内容在文档对象模型中仍然可用，因此在可访问性树中（与-&gt;visibility: hidden&lt;-不同）。这意味着我们可以在页面上搜索并导航到该内容，而无需等待它加载或牺牲渲染性能。</p><p><strong>这个功能特性是在chrome 90 中更新的，在 chrome 85-89 中，屏幕外的子元素-&gt;content-visibility: auto&lt;-被标记为不可见。</strong></p><h3 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h3><p>-&gt;content-visibility&lt;-是chrome85新增的特性，所以兼容性还不是很高，但它是一个非常实用的CSS属性，由于跳过了渲染，如果我们大部分内容都在屏幕外，利用该-&gt;content-visibility&lt;-属性可以使初始用户加载速度更快。相信兼容性的问题在不久的将来会得到解决~</p><img src="https://cdn.chenyingshuang.cn/blog/css/LiangXingCSSRangYeMianTiShengLiaoJin7BeiXuanRanXingNen/16.jpg">`,80),t=[p];function e(c,i,r,D,y,F){return a(),n("div",null,t)}const A=s(o,[["render",e]]);export{C as __pageData,A as default};

import{_ as l,c as o,C as s,a,V as n,o as p}from"./chunks/framework.79590ae5.js";const S=JSON.parse('{"title":"ChatGPT 打字机消息回复实现原理","description":"","frontmatter":{"title":"ChatGPT 打字机消息回复实现原理","date":"2023/05/08 02:45:03","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["info","js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/ChatGPTDaZiJiXiaoXiHuiFuShiXianYuanLi.md"}'),e={name:"views/blog/js/ChatGPTDaZiJiXiaoXiHuiFuShiXianYuanLi.md"},t=s("h6",{id:"原文-掘金",tabindex:"-1"},[a("原文 "),s("a",{href:"https://juejin.cn/post/7229632570374783034",target:"_blank",rel:"noreferrer"},"掘金"),a(),s("a",{class:"header-anchor",href:"#原文-掘金","aria-label":'Permalink to "原文 [掘金](https://juejin.cn/post/7229632570374783034)"'},"​")],-1),c={class:"markdown-body cache"},r=n(`<blockquote><p>🔔概述： 相较于繁重的 WebSockets，SSE 无疑是 H5 简单即时数据更新的轻量级代替方案。</p></blockquote><h2 id="_1-背景" tabindex="-1">1 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1 背景&quot;">​</a></h2><p>在使用 ChatGPT 时，发现输入 prompt 后，页面是逐步给出回复的，起初以为使用了 WebSckets 持久化连接协议，查看其网络请求，发现这个接口的通信方式并非传统的 http 接口或者 WebSockets，而是基于 EventStream 的事件流，像打字机一样，一段一段的返回答案。</p><p>ChatGPT 是一个基于深度学习的大型语言模型，处理自然语言需要大量的计算资源和时间，响应速度肯定比普通的读数据库要慢的多，普通 http 接口等待时间过长，显然并不合适。对于这种单项对话场景，ChagtGPT 将先计算出的数据“推送”给用户，边计算边返回，避免用户因为等待时间过长关闭页面。而这，正式采用了 SSE 技术。</p><p><img src="https://yppphoto.hellobixin.com/yppphoto/34d61d7be4a041c19681b86bb2cc6896.gif" alt="" loading="lazy"></p><h2 id="_2-简介" tabindex="-1">2 简介 <a class="header-anchor" href="#_2-简介" aria-label="Permalink to &quot;2 简介&quot;">​</a></h2><p>Server-Sent Events 服务器推送事件，简称 SSE，是一种服务端实时<strong>主动</strong>向浏览器推送消息的技术。 SSE 是 HTML5 中一个与通信相关的 API，主要由两部分组成：服务端与浏览器端的通信协议（<code>HTTP</code> 协议）及浏览器端可供 JavaScript 使用的 <code>EventSource</code> 对象。</p><p>从“服务端主动向浏览器实时推送消息”这一点来看，该 API 与 WebSockets API 有一些相似之处。但是，该 API 与 WebSockers API 的不同之处在于：</p><table><thead><tr><th align="center">Server-Sent Events API</th><th align="center">WebSockets API</th></tr></thead><tbody><tr><td align="center">基于 HTTP 协议</td><td align="center">基于 TCP 协议</td></tr><tr><td align="center">单工，只能服务端单向发送消息</td><td align="center">全双工，可以同时发送和接收消息</td></tr><tr><td align="center">轻量级，使用简单</td><td align="center">相对复杂</td></tr><tr><td align="center">内置断线重连和消息追踪的功能</td><td align="center">不在协议范围内，需手动实现</td></tr><tr><td align="center">文本或使用 Base64 编码和 gzip 压缩的二进制消息</td><td align="center">类型广泛</td></tr><tr><td align="center">支持自定义事件类型</td><td align="center">不支持自定义事件类型</td></tr><tr><td align="center">连接数 HTTP/1.1 6 个，HTTP/2 可协商（默认 100）</td><td align="center">连接数无限制</td></tr></tbody></table><h2 id="_3-服务端实现" tabindex="-1">3 服务端实现 <a class="header-anchor" href="#_3-服务端实现" aria-label="Permalink to &quot;3 服务端实现&quot;">​</a></h2><h3 id="_3-1-协议" tabindex="-1">3.1 协议 <a class="header-anchor" href="#_3-1-协议" aria-label="Permalink to &quot;3.1 协议&quot;">​</a></h3><p>SSE 协议非常简单，本质是浏览器发起 http 请求，服务器在收到请求后，返回状态与数据，并附带以下 headers： <code>js Content-Type: text/event-stream Cache-Control: no-cache Connection: keep-alive </code> - SSE API规定推送事件流的 MIME 类型为 <code>text/event-stream</code>。 - 必须指定浏览器不缓存服务端发送的数据，以确保浏览器可以实时显示服务端发送的数据。 - SSE 是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive。</p><h3 id="_3-2-消息格式" tabindex="-1">3.2 消息格式 <a class="header-anchor" href="#_3-2-消息格式" aria-label="Permalink to &quot;3.2 消息格式&quot;">​</a></h3><p>EventStream（事件流）为 <code>UTF-8</code> 格式编码的<code>文本</code>或使用 Base64 编码和 gzip 压缩的二进制消息。 每条消息由一行或多行字段（<code>event</code>、<code>id</code>、<code>retry</code>、<code>data</code>）组成，每个字段组成形式为：<code>字段名:字段值</code>。字段以行为单位，每行一个（即以 <code>\\n</code> 结尾）。以<code>冒号</code>开头的行为注释行，会被浏览器忽略。 每次推送，可由多个消息组成，每个消息之间以空行分隔（即最后一个字段以<code>\\n\\n</code>结尾）。</p><blockquote><p>📢 注意：</p><ul><li>除上述四个字段外，其他所有字段都会被忽略。</li><li>如果一行字段中不包含冒号，则整行文本将被视为字段名，字段值为空。</li><li>注释行可以用来防止链接超时，服务端可以定期向浏览器发送一条消息注释行，以保持连接不断。</li></ul></blockquote><h4 id="_3-2-1-event" tabindex="-1">3.2.1 event <a class="header-anchor" href="#_3-2-1-event" aria-label="Permalink to &quot;3.2.1 event&quot;">​</a></h4><p>事件类型。如果指定了该字段，则在浏览器收到该条消息时，会在当前 <code>EventSource</code> 对象（见 4）上触发一个事件，事件类型就是该字段的字段值。可以使用 <code>addEventListener</code> 方法在当前 <code>EventSource</code> 对象上监听任意类型的命名事件。 如果该条消息没有 <code>event</code> 字段，则会触发 <code>EventSource</code> 对象 <code>onmessage</code> 属性上的事件处理函数。</p><h4 id="_3-2-2-id" tabindex="-1">3.2.2 id <a class="header-anchor" href="#_3-2-2-id" aria-label="Permalink to &quot;3.2.2 id&quot;">​</a></h4><p>事件ID。事件的唯一标识符，浏览器会跟踪事件ID，如果发生断连，浏览器会把收到的最后一个事件ID放到 HTTP Header <code>Last-Event-Id</code> 中进行重连，作为一种简单的同步机制。 例如可以在服务端将每次发送的事件ID值自动加 1，当浏览器接收到该事件ID后，下次与服务端建立连接后再请求的 Header 中将同时提交该事件ID，服务端检查该事件ID是否为上次发送的事件ID，如果与上次发送的事件ID不一致则说明浏览器存在与服务器连接失败的情况，本次需要同时发送前几次浏览器未接收到的数据。</p><h4 id="_3-2-3-retry" tabindex="-1">3.2.3 retry <a class="header-anchor" href="#_3-2-3-retry" aria-label="Permalink to &quot;3.2.3 retry&quot;">​</a></h4><p>重连时间。整数值，单位 ms，如果与服务器的连接丢失，浏览器将等待指定时间，然后尝试重新连接。如果该字段不是整数值，会被忽略。 当服务端没有指定浏览器的重连时间时，由浏览器自行决定每隔多久与服务端建立一次连接（一般为 30s）。</p><h4 id="_3-2-4-data" tabindex="-1">3.2.4 data <a class="header-anchor" href="#_3-2-4-data" aria-label="Permalink to &quot;3.2.4 data&quot;">​</a></h4><p>消息数据。数据内容只能以一个字符串的文本形式进行发送，如果需要发送一个对象时，需要将该对象以一个 JSON 格式的字符串的形式进行发送。在浏览器接收到该字符串后，再把它还原为一个 JSON 对象。</p><h3 id="_3-3-示例" tabindex="-1">3.3 示例 <a class="header-anchor" href="#_3-3-示例" aria-label="Permalink to &quot;3.3 示例&quot;">​</a></h3><p>如下事件流示例，共发送了 4 条消息，每条消息间以一个空行作为分隔符。 第一条仅仅是个注释，因为它以冒号开头。 第二条消息只包含一个 data 字段，值为 &#39;this is second message&#39;。 第三条消息包含两个 data 字段，其会被解析为一个字段，值为 &#39;this is third message part 1\\nthis is third message part 2&#39;。 第四条消息包含完整四个字段，指定了事件类型为 &#39;server-time&#39;，事件id 为 &#39;1&#39;，重连时间为 &#39;30000&#39;ms，消息数据为 <code>JSON</code> 格式的 &#39;{&quot;text&quot;: &quot;this is fourth message&quot;, &quot;time&quot;: &quot;12:00:00&quot;}&#39;。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> is first message</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> is second message</span></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> is third message part one</span></span>
<span class="line"><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> is third message part two</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> server</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">time</span></span>
<span class="line"><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">retry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30000</span></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this is fourth message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">time</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2023-04-09 12:00:00</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_4-浏览器-api" tabindex="-1">4 浏览器 API <a class="header-anchor" href="#_4-浏览器-api" aria-label="Permalink to &quot;4 浏览器 API&quot;">​</a></h2><p>在浏览器端，可以使用 JavaScript 的 EventSource API 创建 <code>EventSource</code> 对象监听服务器发送的事件。一旦建立连接，服务器就可以使用 HTTP 响应的 &#39;text/event-stream&#39; 内容类型发送事件消息，浏览器则可以通过监听 EventSource 对象的 <code>onmessage</code>、<code>onopen</code> 和 <code>onerror</code> 事件来处理这些消息。</p><h3 id="_4-1-建立连接" tabindex="-1">4.1 建立连接 <a class="header-anchor" href="#_4-1-建立连接" aria-label="Permalink to &quot;4.1 建立连接&quot;">​</a></h3><p>EventSource 接受两个参数：URL 和 options。 URL 为 http 事件来源，一旦 EventSource 对象被创建后，浏览器立即开始对该 URL 地址发送过来的事件进行监听。 options 是一个可选的对象，包含 withCredentials 属性，表示是否发送凭证（cookie、HTTP认证信息等）到服务端，默认为 false。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> eventSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventSource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http_api_url</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">withCredentials</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>与 XMLHttpRequest 对象类型，EventSource 对象有一个 readyState 属性值，具体含义如下表：</p><table><thead><tr><th align="center">readyState</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">浏览器与服务端尚未建立连接或连接已被关闭</td></tr><tr><td align="center">1</td><td align="center">浏览器与服务端已成功连接，浏览器正在处理接收到的事件及数据</td></tr><tr><td align="center">2</td><td align="center">浏览器与服务端建立连接失败，客户端不再继续建立与服务端之间的连接</td></tr></tbody></table><p>可以使用 EventSource 对象的 <code>close</code> 方法关闭与服务端之间的连接，使浏览器不再建立与服务端之间的连接。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化 eventSource 等省略 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 关闭连接 </span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><h3 id="_4-2-监听事件" tabindex="-1">4.2 监听事件 <a class="header-anchor" href="#_4-2-监听事件" aria-label="Permalink to &quot;4.2 监听事件&quot;">​</a></h3><p>EventSource 对象本身继承自 EventTarget 接口，因此可以使用 addEventListener() 方法来监听事件。EventSource 对象触发的事件主要包括以下三种：</p><ul><li>open 事件：当成功连接到服务端时触发。</li><li>message 事件：当接收到服务器发送的消息时触发。该事件对象的 data 属性包含了服务器发送的消息内容。</li><li>error 事件：当发生错误时触发。该事件对象的 event 属性包含了错误信息。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化 eventSource 等省略 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection opened</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 监听自定义事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error occurred: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>当然，也可以采用属性监听（<code>onopen</code>、<code>onmessage</code>、<code>onerror</code>）的形式。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化 eventSource 等省略</span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onopen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection opened</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error occurred: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p>📢注意： <code>EventSource</code> 对象的属性监听只能监听预定义的事件类型（<code>open</code>、<code>message</code>、<code>error</code>）。不能用于监听自定义事件类型。如果要实现自定义事件类型的监听，可以使用 <code>addEventListener()</code> 方法。</p></blockquote><h2 id="_5-实践" tabindex="-1">5 实践 <a class="header-anchor" href="#_5-实践" aria-label="Permalink to &quot;5 实践&quot;">​</a></h2><h3 id="_5-1-服务端" tabindex="-1">5.1 服务端 <a class="header-anchor" href="#_5-1-服务端" aria-label="Permalink to &quot;5.1 服务端&quot;">​</a></h3><p>使用 Node.js 实现 SSE 的简单示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">((req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> res) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req.url === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果请求根路径，返回 index.html 文件 </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            if </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error loading index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> else {</span></span>
<span class="line"><span style="color:#F07178;">                res.writeHead(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> {</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">     } </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/events</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#676E95;font-style:italic;">// 如果请求 /events 路径，建立 SSE 连接 </span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/event-stream</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keep-alive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#676E95;font-style:italic;">// 每隔 1 秒发送一条消息 </span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">intervalId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(() </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">             res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">event: customEvent</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">             res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">id: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">             res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">retry: 30000</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">             const data = { id, time</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toISOString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">data: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">); </span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">          }</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 当客户端关闭连接时停止发送消息</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#A6ACCD;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">              clearInterval</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">intervalId</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">; </span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">              res.end();</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果请求的路径无效，返回 404 状态码 </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">})</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server listening on port 3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="_5-2-浏览器" tabindex="-1">5.2 浏览器 <a class="header-anchor" href="#_5-2-浏览器" aria-label="Permalink to &quot;5.2 浏览器&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&amp;lt;!DOCTYPE html&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;html lang=&quot;en&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;head&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;title&amp;gt;SSE Demo&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;body&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;h1&amp;gt;SSE Demo&amp;lt;/h1&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;button onclick=&quot;connectSSE()&quot;&amp;gt;建立 SSE 连接&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;button onclick=&quot;closeSSE()&quot;&amp;gt;断开 SSE 连接&amp;lt;/button&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt; </span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;div id=&quot;message&quot;&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;script&amp;gt; </span></span>
<span class="line"><span style="color:#A6ACCD;">        const messageElement = document.getElementById(&#39;message&#39;) </span></span>
<span class="line"><span style="color:#A6ACCD;">        let eventSource // 建立 SSE 连接 </span></span>
<span class="line"><span style="color:#A6ACCD;">        const connectSSE = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">            eventSource = new EventSource(&#39;/events&#39;) // 监听消息事件 </span></span>
<span class="line"><span style="color:#A6ACCD;">            eventSource.addEventListener(&#39;customEvent&#39;, (event) =&amp;gt; { </span></span>
<span class="line"><span style="color:#A6ACCD;">                const data = JSON.parse(event.data) </span></span>
<span class="line"><span style="color:#A6ACCD;">                messageElement.innerHTML += \`\${data.id} --- \${data.time}\` + &#39;&amp;lt;br /&amp;gt;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">             }) </span></span>
<span class="line"><span style="color:#A6ACCD;">            eventSource.onopen = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">                messageElement.innerHTML += \`SSE 连接成功，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\` </span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            eventSource.onerror = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">                messageElement.innerHTML += \`SSE 连接错误，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">             } </span></span>
<span class="line"><span style="color:#A6ACCD;">         } </span></span>
<span class="line"><span style="color:#A6ACCD;">         // 断开 SSE 连接 </span></span>
<span class="line"><span style="color:#A6ACCD;">         const closeSSE = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">             eventSource.close() </span></span>
<span class="line"><span style="color:#A6ACCD;">             messageElement.innerHTML += \`SSE 连接关闭，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">      &amp;lt;/script&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/body&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&amp;lt;/html&amp;gt;</span></span></code></pre></div><p>将上面的两份代码保存为 <code>server.js</code> 和 <code>index.html</code>，并在命令行中执行 <code>node server.js</code> 启动服务端，然后在浏览器中打开 <code>http://localhost:3000</code> 即可看到 SSE 效果。</p><p><img src="https://yppphoto.hellobixin.com/yppphoto/32451fb2d29e4943bf09c00a9974bf68.gif" alt="" loading="lazy"></p><h2 id="_6-兼容性" tabindex="-1">6 兼容性 <a class="header-anchor" href="#_6-兼容性" aria-label="Permalink to &quot;6 兼容性&quot;">​</a></h2>`,51),y={href:"https://link.juejin.cn?target=https%3A%2F%2Fcaniuse.com%2F%3Fsearch%3DServer%2520-sent%2520events",target:"_blank",title:"https://caniuse.com/?search=Server%20-sent%20events",ref:"nofollow noopener noreferrer"},F=s("img",{src:"https://yppphoto.hellobixin.com/yppphoto/cd45f0b772534efbba3d95444aa57334.png",alt:"",loading:"lazy"},null,-1),D={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feventsource",target:"_blank",title:"https://www.npmjs.com/package/eventsource",ref:"nofollow noopener noreferrer"},i=n(`<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;">(EventSource) </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> “</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">”) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 支持</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不支持，使用 polyfill</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_7-总结" tabindex="-1">7 总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7 总结&quot;">​</a></h2><p>SSE 技术是一种轻量级的实时通信技术，基于 HTTP 协议，具有服务端推送、断线重连、简单轻量等优点。但是，SSE 技术也有一些缺点，如不能进行双向通信、连接数受限等。</p><p>SSE 可以在 Web 应用程序中实现诸如股票在线数据、日志推送、聊天室实时人数等即时数据推送功能。需要注意的是，SSE 并不是适用于所有的实时推送场景。在需要高并发、高吞吐量和低延迟的场景下，WebSockets 可能更加适合。而在需要更轻量级的推送场景下，SSE 可能更加适合。因此，在选择即时更新方案时，需要根据具体的需求和场景进行选择。</p>`,4);function C(A,d,h,u,m,g){return p(),o("div",null,[t,s("div",c,[r,s("p",null,[a("发展至今，SSE 已具有广泛的的浏览器"),s("a",y,"兼容性",512),a("，几乎除 IE 之外的浏览器均已支持。")]),s("p",null,[F,a(" 对于不支持 EventSource 的浏览器，可以使用 "),s("a",D,"polyfill",512),a(" 实现。判断浏览器是否支持 EventSource：")]),i])])}const E=l(e,[["render",C]]);export{S as __pageData,E as default};

import{_ as s,c as a,o as l,V as n}from"./chunks/framework.f518e559.js";const F=JSON.parse('{"title":"JS的数组模式","description":"","frontmatter":{"title":"JS的数组模式","date":"2022/12/20 12:05:29","summary":null,"config":{"show":false,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/JSDeShuZuMoShi.md"}'),o={name:"views/blog/js/JSDeShuZuMoShi.md"},p=n(`<p>首先我们来看看这两段代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr1</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeEnd</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>这段代码的执行耗时是 -&gt;958.705322265625 ms&lt;-</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">arr2[</span><span style="color:#F78C6C;">100000000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr2</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeEnd</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>这段代码的执行耗时是 -&gt;6455.6630859375 ms&lt;-</p><p>这两段代码的区别仅仅是-&gt;arr2&lt;-提前给数组的最后一项赋值，那为什么会有这么大的执行时间差距呢</p><div class="tip custom-block"><p class="custom-block-title">为什么？</p><p>归根结底，是因为V8会以不同的形式去存储JS数组</p><p>模式一：<strong>快速模式</strong></p><p>模式二：<strong>字典模式</strong></p></div><h4 id="快速模式" tabindex="-1">快速模式 <a class="header-anchor" href="#快速模式" aria-label="Permalink to &quot;快速模式&quot;">​</a></h4><p>对应C语言中的数组，速度快，紧凑</p><p>触发机制：</p><ul><li>索引从-&gt;0&lt;-至-&gt;length-1&lt;-且无空洞</li><li>或 预分配数组小于-&gt;100000&lt;-，无论有空洞</li></ul><h4 id="字典模式" tabindex="-1">字典模式 <a class="header-anchor" href="#字典模式" aria-label="Permalink to &quot;字典模式&quot;">​</a></h4><p>对应C语言中的哈希表，速度慢，松散</p><p>触发机制：</p><ul><li>预分配数组大于等于-&gt;100000&lt;-，且数组有空洞</li></ul><h4 id="v8数组模式-优化策略" tabindex="-1">V8数组模式 - 优化策略 <a class="header-anchor" href="#v8数组模式-优化策略" aria-label="Permalink to &quot;V8数组模式 - 优化策略&quot;">​</a></h4><ul><li>从0开始连续的初始化数组，以避免数组进入字典模式</li><li>不要预分配一个超大数组</li><li>删除数组元素时让数组保持紧凑，尽可能的避免使用delete</li><li>不要访问未初始化或已删除的数组元素</li></ul>`,17),e=[p];function t(c,r,C,i,y,D){return l(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};

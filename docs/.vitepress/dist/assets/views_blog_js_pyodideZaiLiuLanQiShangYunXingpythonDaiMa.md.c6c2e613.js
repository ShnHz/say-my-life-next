import{_ as s,c as a,o as n,V as l}from"./chunks/framework.f518e559.js";const A=JSON.parse('{"title":"pyodide-在浏览器上运行python代码","description":"","frontmatter":{"title":"pyodide-在浏览器上运行python代码","date":"2023/04/14 10:15:21","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js","tool"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/pyodideZaiLiuLanQiShangYunXingpythonDaiMa.md"}'),p={name:"views/blog/js/pyodideZaiLiuLanQiShangYunXingpythonDaiMa.md"},o=l(`<h3 id="pyodide-是什么" tabindex="-1">pyodide 是什么？ <a class="header-anchor" href="#pyodide-是什么" aria-label="Permalink to &quot;pyodide 是什么？&quot;">​</a></h3><p>-&gt;Pyodide&lt;-是CPython到<a href="https://juejin.cn/post/7212444005065211961?share_token=1776334d-d47f-4967-9a29-62bea7f09453" target="_blank" rel="noreferrer">WebAssembly</a> /Emscripten的一个接口，主要在浏览器中使用。</p><p>-&gt;Pyodide&lt;-在浏览器中使用-&gt;micropip&lt;-安装和运行-&gt;Python&lt;-包。它附带了一个健壮的-&gt;Javascript&lt;-⟺ -&gt;Python&lt;-外部函数接口，这样您就可以在代码中自由地混合这两种语言，而不会产生太大的摩擦。这包括对错误处理（用一种语言抛出错误，用另一种语言捕获错误）、异步/等待等的完全支持。在浏览器中使用时，-&gt;Python&lt;-可以完全访问-&gt;Web API&lt;-。</p><p><a href="https://pyodide.org/en/stable/index.html#" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="一个简单的demo" tabindex="-1">一个简单的demo <a class="header-anchor" href="#一个简单的demo" aria-label="Permalink to &quot;一个简单的demo&quot;">​</a></h3><p>我们可以随便新建一个-&gt;index.html&lt;-写入以下代码</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pyodide</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loadPyodide</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        indexURL</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://cdn.jsdelivr.net/pyodide/v0.20.0/full/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runPython</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">print(&#39;Hello, world from the browser!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>打开控制台可以看到输出了“Hello, world from the browser!”，这代表我们的-&gt;python&lt;-代码成功在浏览器环境跑起来了！</p><h3 id="常用的语法" tabindex="-1">常用的语法 <a class="header-anchor" href="#常用的语法" aria-label="Permalink to &quot;常用的语法&quot;">​</a></h3><h4 id="加载第三方库" tabindex="-1">加载第三方库 <a class="header-anchor" href="#加载第三方库" aria-label="Permalink to &quot;加载第三方库&quot;">​</a></h4><p>导入 -&gt;Pyodide&lt;- 后只有 -&gt;Python&lt;- 标准库可用。要使用其他包，您需要使用以下任一方式加载它们：</p><ul><li>-&gt;micropip.install()&lt;-(Python) 用于带有轮子的纯 Python 包以及 Pyodide 包（包括 Emscripten/wasm32 二进制轮子）。它可以从 PyPI、JsDelivr CDN 或其他 URL 安装包。</li><li>-&gt;pyodide.loadPackage()&lt;-(Javascript) 用于使用 Pyodide 构建的包。这是一个开销较小但功能更有限的函数。micropip 使用这个函数来加载 Pyodide 包。在大多数情况下，您应该使用 micropip。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pyodide </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadPyodide</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadPackage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">micropip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> micropip </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pyimport</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">micropip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> micropip</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">numpy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h4 id="输入js变量" tabindex="-1">输入js变量 <a class="header-anchor" href="#输入js变量" aria-label="Permalink to &quot;输入js变量&quot;">​</a></h4><p>我们可以用 -&gt;pyodide.toPy(obj, options)&lt;- 这个api</p><p>尽可能将 -&gt;JavaScript&lt;- 对象转换为 -&gt;Python&lt;- 对象。</p><p>如果对象是不可变的或 -&gt;PyProxy&lt;-，它将原封不动地返回。如果对象不能转换为-&gt;Python&lt;-，它将原封不动地返回。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pyData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toPy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pyReturnData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runPython</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    print(x)</span></span>
<span class="line"><span style="color:#C3E88D;">    print(y)</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">globals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> pyData </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>此时就会在python代码中输出-&gt;x=1,y=2&lt;-</p><h4 id="输出python变量" tabindex="-1">输出python变量 <a class="header-anchor" href="#输出python变量" aria-label="Permalink to &quot;输出python变量&quot;">​</a></h4><p>当我们在-&gt;python&lt;-代码中获得了想要的数据，该如何从-&gt;javascript&lt;-中获取呢？</p><p>-&gt;pyodide.runPython()&lt;- 这个api，如果 -&gt;Python&lt;- 代码中的最后一条语句是表达式（并且代码不以分号结尾），则返回表达式的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pyReturnData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pyodide</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runPython</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    x = 1</span></span>
<span class="line"><span style="color:#C3E88D;">    x</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>此时就会从-&gt;javascript&lt;-中获取到-&gt;x&lt;-的值，即-&gt;pyReturnData=1&lt;-</p>`,24),t=[o];function e(c,r,y,i,D,F){return n(),a("div",null,t)}const C=s(p,[["render",e]]);export{A as __pageData,C as default};

import{_ as e,o as i,c as l,S as r}from"./chunks/framework.7114eebe.js";const p=JSON.parse('{"title":"浏览器","description":"","frontmatter":{"title":"浏览器","config":{"dir":true},"password":true},"headers":[],"relativePath":"views/interview/Browser.md","filePath":"views/interview/Browser.md"}'),o={name:"views/interview/Browser.md"};function t(s,a,h,n,d,c){return i(),l("div",null,a[0]||(a[0]=[r('<h3 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h3><h4 id="_1-说一说cookie、sessionstorage、localstorage" tabindex="-1">1.说一说cookie、sessionStorage、localStorage？ <a class="header-anchor" href="#_1-说一说cookie、sessionstorage、localstorage" aria-label="Permalink to &quot;1.说一说cookie、sessionStorage、localStorage？&quot;">​</a></h4><ul><li>cookie：容量小，约4kb左右，生命周期自定义，请求时可以自动携带，前后端都可以设置。</li><li>sessionStorage：容量大，约5MB左右，关闭页面后自动清除。</li><li>localStorage：容量大，约20MB左右，永久保存，需要手动删除。</li></ul><h4 id="_2-浏览器的垃圾回收机制" tabindex="-1">2.浏览器的垃圾回收机制 <a class="header-anchor" href="#_2-浏览器的垃圾回收机制" aria-label="Permalink to &quot;2.浏览器的垃圾回收机制&quot;">​</a></h4><p>新时代</p><p>采用空间换时间的 scavenge 算法：整个空间分为两块，变量仅存在其中一块，回收的时候将存活变量复制到另一块空间，不存活的回收掉，周而复始轮流操作</p><p>旧时代</p><ul><li>标记清除：给全部活动变量打个标记，没有打标记的，到清除阶段则清除</li><li>引用清除：当没有其他变量引用它时候则清除</li></ul><h4 id="_3-前端路由是什么-有哪几种实现方式" tabindex="-1">3.前端路由是什么？有哪几种实现方式 <a class="header-anchor" href="#_3-前端路由是什么-有哪几种实现方式" aria-label="Permalink to &quot;3.前端路由是什么？有哪几种实现方式&quot;">​</a></h4><p>主要有两种</p><ul><li>1.hash模式，监听url#后的内容，执行相应操作，实现前端路由</li><li>2.history模式，利用historyApi实现路由，重写history.pushState和history.replaceState来让popstate能够被触发</li></ul><p><code class="default">hash</code>：浏览器也有一个hashChange事件，监听这个事件，来渲染不同的组件代码。</p><ul><li>hash模式所有的工作都是在前端完成的，不需要后端服务的配合</li><li>hash模式的实现方式就是通过监听URL中hash部分的变化，从而做出对应的渲染逻辑</li><li>hash模式下，URL中会带有#，看起来不太美观</li></ul><p><code class="default">history</code>：h5提供了一个history全局对象，这个对象里面有各种方法，而history路由的实现，主要就是依靠于pushState与replaceState实现的，是需要后端配合的，不然刷新页面会404</p><ul><li>window.history.go 可以跳转到浏览器会话历史中的指定的某一个记录页</li><li>window.history.forward 指向浏览器会话历史中的下一页，跟浏览器的前进按钮相同</li><li>window.history.back 返回浏览器会话历史中的上一页，跟浏览器的回退按钮功能相同</li><li>window.history.pushState 可以将给定的数据压入到浏览器会话历史栈中</li><li>window.history.replaceState 将当前的会话页面的url替换成指定的数据</li></ul><h4 id="_4-小程序与传统网页的区别" tabindex="-1">4.小程序与传统网页的区别？ <a class="header-anchor" href="#_4-小程序与传统网页的区别" aria-label="Permalink to &quot;4.小程序与传统网页的区别？&quot;">​</a></h4><p>小程序其实是运行在一个微信团队或者说是企业应用内的一个基于浏览器内核创建的内置解析器里，而网页就是运行在浏览器内的</p><p>小程序对于开发者来说，兼容性问题其实可以不用太在意，因为例如微信团队会提供开发工具以及制定开发规范，但是网页运行的环境太多太杂，很容易出现兼容性问题</p><p>小程序对于硬件获取的权限比较充分，比如网络通信状态、数据缓存能力、硬件调用等等，但是浏览器环境没有这么充分的权限</p><h4 id="_5-浏览器运行过程" tabindex="-1">5.浏览器运行过程 <a class="header-anchor" href="#_5-浏览器运行过程" aria-label="Permalink to &quot;5.浏览器运行过程&quot;">​</a></h4><ul><li>解析URL</li><li>缓存判断</li><li>DNS解析</li><li>获取MAC地址</li><li>TCP三次握手</li><li>HTTPS握手</li><li>返回数据</li><li>页面渲染</li><li>TCP四次挥手</li></ul><h4 id="_6-浏览器的缓存机制" tabindex="-1">6.浏览器的缓存机制？ <a class="header-anchor" href="#_6-浏览器的缓存机制" aria-label="Permalink to &quot;6.浏览器的缓存机制？&quot;">​</a></h4><p>浏览器缓存主要分为<strong>强缓存（也称本地缓存）<strong>和</strong>协商缓存（也称弱缓存）</strong></p><h5 id="强缓存" tabindex="-1">强缓存： <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存：&quot;">​</a></h5><p>当请求资源的时，如果是之前请求过的并使用强缓存，那么在过期时间内将不会发送本次请求向服务器获取资源，而是直接从浏览器缓存中获取（不管资源是否改动）。过期了将重新从服务器获取，并再次强缓存。</p><p>状态码：200</p><h5 id="协商缓存" tabindex="-1">协商缓存： <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存：&quot;">​</a></h5><p>当请求资源时，如果是之前请求过的并使用协商缓存，还是发送请求到服务器，服务器通过逻辑判断确认资源没有修改返回304状态码，那么本次的资源则是从缓存中获取；如果经过判断确认资源被修改过，则重新发送资源到客户端，并且客户端更新缓存。</p><p>状态码：304</p><h4 id="_7-浏览器的渲染过程" tabindex="-1">7.浏览器的渲染过程 <a class="header-anchor" href="#_7-浏览器的渲染过程" aria-label="Permalink to &quot;7.浏览器的渲染过程&quot;">​</a></h4><ul><li>构建DOM树</li><li>样式计算，把 CSS 转换为浏览器能够理解的结构，并转换样式表中的属性值，使其标准化，生成CSSOM树（CSS规则树）</li><li>结合DOM树以及CSSOM树生成render树</li><li>解析完成，进行渲染</li></ul><h4 id="_8-css加载会造成阻塞吗" tabindex="-1">8.css加载会造成阻塞吗 <a class="header-anchor" href="#_8-css加载会造成阻塞吗" aria-label="Permalink to &quot;8.css加载会造成阻塞吗&quot;">​</a></h4><p>CSS 加载会阻塞 Dom 的渲染，DOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。 然而,由于 Render Tree 是依赖于 DOM Tree 和 CSSOM Tree 的, 所以他必须等待到 CSSOM Tree 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。</p><h4 id="_9-如何监听浏览器返回事件-并且阻止返回" tabindex="-1">9.如何监听浏览器返回事件,并且阻止返回 <a class="header-anchor" href="#_9-如何监听浏览器返回事件-并且阻止返回" aria-label="Permalink to &quot;9.如何监听浏览器返回事件,并且阻止返回&quot;">​</a></h4><p>监听浏览器的popstate事件,在事件触发的时候向history内pushState一个当前页面，在点击后退前和点击时都插入一次，那样无论点前进还是后退永远都会留在这个页面了</p><h3 id="安全攻击" tabindex="-1">安全攻击 <a class="header-anchor" href="#安全攻击" aria-label="Permalink to &quot;安全攻击&quot;">​</a></h3><h4 id="_1-csrf攻击是什么-如何防范" tabindex="-1">1.CSRF攻击是什么？如何防范？ <a class="header-anchor" href="#_1-csrf攻击是什么-如何防范" aria-label="Permalink to &quot;1.CSRF攻击是什么？如何防范？&quot;">​</a></h4><p>跨站请求伪造，利用用户的已登录凭证来冒充用户攻击网站。</p><ul><li>利用验证码</li><li>Referer检查</li><li>添加token验证</li></ul><h4 id="_2-xss攻击是什么-如何防范" tabindex="-1">2.XSS攻击是什么？如何防范？ <a class="header-anchor" href="#_2-xss攻击是什么-如何防范" aria-label="Permalink to &quot;2.XSS攻击是什么？如何防范？&quot;">​</a></h4><p>跨站脚本注入，攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。</p><ul><li>设置HttpOnly防止窃取Cookie</li><li>输入检查，检查用户的输入项目是否存在有&quot;&lt;&quot;、&quot;&gt;&quot;等特殊字符，如果存在就进行特殊编码处理</li><li>输出检查，服务端返回的数值也可能存在问题</li></ul>',42)]))}const S=e(o,[["render",t]]);export{p as __pageData,S as default};

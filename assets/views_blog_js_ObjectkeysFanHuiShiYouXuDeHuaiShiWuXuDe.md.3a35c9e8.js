import{_ as p,o,c as e,C as n,a,S as l}from"./chunks/framework.7114eebe.js";const u=JSON.parse('{"title":"Object.keys返回是有序的还是无序的？","description":"","frontmatter":{"title":"Object.keys返回是有序的还是无序的？","date":"2023/04/20 20:17:55","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js","info"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/ObjectkeysFanHuiShiYouXuDeHuaiShiWuXuDe.md","filePath":"views/blog/js/ObjectkeysFanHuiShiYouXuDeHuaiShiWuXuDe.md"}'),t={name:"views/blog/js/ObjectkeysFanHuiShiYouXuDeHuaiShiWuXuDe.md"},c={class:"markdown-body cache"},r={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys",target:"_blank",title:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",ref:"nofollow noopener noreferrer"},y={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2F%23sec-object.keys",target:"_blank",title:"https://tc39.es/ecma262/#sec-object.keys",ref:"nofollow noopener noreferrer"};function D(F,s,i,B,d,A){return o(),e("div",null,[s[6]||(s[6]=n("h6",{id:"原文-掘金",tabindex:"-1"},[a("原文 "),n("a",{href:"https://juejin.cn/post/7223995981234700348",target:"_blank",rel:"noreferrer"},"掘金"),a(),n("a",{class:"header-anchor",href:"#原文-掘金","aria-label":'Permalink to "原文 [掘金](https://juejin.cn/post/7223995981234700348)"'},"​")],-1)),n("div",c,[s[2]||(s[2]=l(`<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>最近在负责Quill的项目，产品提出有个需求，需要在编辑器按<strong>enter键</strong>换行的时候发起请求，同时还要记录当前光标所在的行。</p><p>但是Quill一旦按<strong>enter键</strong>换行，光标就变了，就找不到换行前的那行。所以就得要求我们发请求必须在换行之前，然后把该行记录下来，后面就可以处理了。</p><h3 id="问题出现" tabindex="-1">问题出现 <a class="header-anchor" href="#问题出现" aria-label="Permalink to &quot;问题出现&quot;">​</a></h3><p>Quill可以添加键盘的处理函数，通过<code>quill.addBinding</code>函数或者在quill的<code>keyboard</code>配置中，比如监听<strong>enter</strong>键</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Quill</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#editor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">keyboard</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">bindings</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">enter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#BABED8;">           </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">enter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">           </span><span style="color:#F07178;">handler</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">             </span><span style="color:#676E95;font-style:italic;">// todo</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">         </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>官方文档有说明</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e22abeb4a8c640948ebb3d1ea38fff9d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.png" loading="lazy"></p><p>这个添加自定义键盘事件是会插入到当前默认的键盘事件后面。</p><p><strong>如果想插入到当前默认的键盘事件前面执行，那么应该怎么做？</strong></p><p>看了官方文档，没有找到有说明。</p><p>于是，就去看看源码看看是怎么添加。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Keyboard</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Module</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">quill</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">quill</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">((</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 重点</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#F07178;"> === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">list autofill</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> &amp;</span><span style="color:#BABED8;font-style:italic;">amp</span><span style="color:#F07178;">;&amp;</span><span style="color:#BABED8;font-style:italic;">amp</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">          quill.scroll.whitelist != </span><span style="color:#BABED8;font-style:italic;">null</span><span style="color:#F07178;"> &amp;</span><span style="color:#BABED8;font-style:italic;">amp</span><span style="color:#F07178;">;&amp;</span><span style="color:#BABED8;font-style:italic;">amp</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">          !quill.scroll.whitelist</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">list</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">this.options.bindings</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">addBinding</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">addBinding</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">context</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">handler</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">binding</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">normalize</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">binding</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">extend</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">binding</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">binding</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">binding</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">bindings</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">binding</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">binding</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这里Quill是用<code>Object.keys</code>方法取到所有的键，然后再调用<code>addBinding</code>方法把<code>键值</code>push到<code>bindings</code>中。</p><p>所以我就在想</p><p><code>Object.keys</code>返回的数组的key是有顺序的么？</p><p>是按照定义的先后顺序返回的么？</p><p>能不能改变顺序以实现我的需求？</p><h3 id="object-keys" tabindex="-1">Object.keys <a class="header-anchor" href="#object-keys" aria-label="Permalink to &quot;Object.keys&quot;">​</a></h3>`,19)),n("p",null,[n("a",r,"mdn",512),s[0]||(s[0]=a("上面的描述："))]),s[3]||(s[3]=n("p",null,[n("strong",null,[n("code",null,"Object.keys()")]),a(" 只会遍历"),n("strong",null,"自身可以枚举"),a("的属性，并返回数组。数组属性的顺序和正常循环遍历该对象时返回的顺序一致。")],-1)),s[4]||(s[4]=n("p",null,"这个顺序一致让人更加疑惑？到底是以什么顺序返回？",-1)),n("p",null,[s[1]||(s[1]=a("继续查阅资料，我们打开ecma262标准的文档，找到")),n("a",y,"Object.keys部分",512)]),s[5]||(s[5]=l(`<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">nbsp;</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">O</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">nbsp;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#BABED8;"> Let obj be </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">ToObject</span><span style="color:#BABED8;">(O)</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#BABED8;"> Let keyList be </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">EnumerableOwnProperties</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key)</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#BABED8;"> Return </span><span style="color:#82AAFF;">CreateArrayFromList</span><span style="color:#BABED8;">(keyList)</span><span style="color:#89DDFF;">.</span></span></code></pre></div><p>首先尝试把参数转成对象，接着调用<code>EnumerableOwnProperties</code>方法把对象传入，返回keyList，这个应该是由key返回的list。</p><p>继续看<code>EnumerableOwnProperties</code>方法的定义</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">EnumerableOwnProperties</span><span style="color:#BABED8;"> ( O</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> kind )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#BABED8;"> Let ownKeys be </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> O</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">[[OwnPropertyKeys]]()</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#BABED8;"> 省略部分代码</span></span></code></pre></div><p><code>EnumerableOwnProperties</code>方法内部继续调用了对象的<code>O.[[OwnPropertyKeys]]</code>方法，返回<code>ownKeys</code>。</p><p>然后继续看<code>[[OwnPropertyKeys]]</code>的定义，内部又调用了<code>OrdinaryOwnPropertyKeys</code>方法。</p><p>真的是一层套一层，层层不止呀。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">[[OwnPropertyKeys]] ( )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#BABED8;"> Return </span><span style="color:#82AAFF;">OrdinaryOwnPropertyKeys</span><span style="color:#BABED8;">(O)</span><span style="color:#89DDFF;">.</span></span></code></pre></div><p>最后我们看到<code>OrdinaryOwnPropertyKeys</code>的定义，找到了内部的逻辑。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">OrdinaryOwnPropertyKeys</span><span style="color:#BABED8;"> ( O )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#BABED8;"> Let keys be a </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> empty List</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#BABED8;"> For each own property key P </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> O such that P is an array index</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> ascending numeric index order</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> Append P to keys</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#BABED8;"> For each own property key P </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> O such that P is a String and P is not an array index</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> ascending chronological order </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> property creation</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> Append P to keys</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">4.</span><span style="color:#BABED8;"> For each own property key P </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> O such that P is a Symbol</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> ascending chronological order </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> property creation</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> Append P to keys</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#F78C6C;">5.</span><span style="color:#BABED8;"> Return keys</span><span style="color:#89DDFF;">.</span></span></code></pre></div><p>我简单翻译一下：</p><p>流程大概是这样：</p><ol><li>先定义一个空数组,叫<code>keys</code>。</li><li>接着遍历对象，如果key是<strong>数组的索引</strong>，就<strong>升序</strong>把这些索引push到数组中(<strong>不是定义的顺序</strong>)</li><li>如果key是字符串且不是数组的索引，就按照创建时<strong>定义的顺序</strong>push到数组中</li><li>如果key是个<code>Symbol</code>，就按照创建时定义的顺序push到数组中</li><li>返回<code>keys</code>。</li></ol><p>可以看到文档如果key是数组的索引，也就是正整数，会优先排序，接着是字符串，Symbol。</p><p>因为<code>Object.keys</code>不会返回<code>Symbol</code>类型，这里就不做讨论了。</p><p>我们可以通过例子来看看</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">答案cp3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">gender</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">// [&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">答案cp3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">gender</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">//  [&#39;13&#39;, &#39;name&#39;, &#39;gender&#39;]</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">答案cp3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">6</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">//  [&#39;6&#39;, &#39;13&#39;, &#39;name&#39;]</span></span></code></pre></div><p>如果你的key都是字符串，且不是数字,就按照定义的顺序返回，如果有数字，包括字符串数字，就优先返回数字，再返回定义的顺序。</p><p><strong>但是这里要注意一点：</strong> key要求是数组的索引，所以必须要是正整数，<strong>如果你是浮点数，则会当作字符串处理</strong>，会按照定义的顺序返回。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">答案cp3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">6.1</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">// [&#39;13&#39;, &#39;name&#39;, &#39;6.1&#39;]</span></span></code></pre></div><p>13仍然排在前面，但是name和6.1是按照定义的顺序返回，这里要注意一下。</p><h3 id="问题解决" tabindex="-1">问题解决 <a class="header-anchor" href="#问题解决" aria-label="Permalink to &quot;问题解决&quot;">​</a></h3><p>所以我们想要自己定义的<code>enter</code>键函数在默认的键盘事件前面执行，把key改成<strong>正整数</strong>即可。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Quill</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#editor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">keyboard</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">bindings</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#BABED8;">           </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">enter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">           </span><span style="color:#F07178;">handler</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">             </span><span style="color:#676E95;font-style:italic;">// todo</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">         </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>我之前一直认为<code>Object.keys</code>的返回是无序的，这次通过看Quill源码学到<code>Object.keys</code>返回的顺序，然后解决了需求问题，过程还行，继续加油。</p><p>最后总结一下<code>Object.keys</code>返回的顺序规则：</p><ol><li>如果有数字，且是正整数，则优先返回</li><li>其它字符串类型（包括浮点数）则按照定义的顺序返回</li><li>最后是<code>Symbol</code>类型，也是按照定义的顺序返回。但是<code>Object.keys</code>不返回<code>Symbol</code>类型，这里可以忽略。</li></ol><p>感谢你的阅读。</p>`,29))])])}const b=p(t,[["render",D]]);export{u as __pageData,b as default};

import{_ as e,o as l,c as a,S as d}from"./chunks/framework.7114eebe.js";const c=JSON.parse('{"title":"JS:前端性能优化","description":"","frontmatter":{"title":"JS:前端性能优化","date":"2023/08/25 14:17:35","summary":"从代码纬度的一些运行速度上的优化项目","config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/JSQianDuanXingNenYouHua.md","filePath":"views/blog/js/JSQianDuanXingNenYouHua.md"}'),r={name:"views/blog/js/JSQianDuanXingNenYouHua.md"};function n(s,t,i,y,g,f){return l(),a("div",null,t[0]||(t[0]=[d('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>可以在代码层面显著提高性能的一些小tip</p></div><h3 id="_1-合并数组" tabindex="-1">1. 合并数组 <a class="header-anchor" href="#_1-合并数组" aria-label="Permalink to &quot;1. 合并数组&quot;">​</a></h3><p>结论：具体结合实际场景使用， <code class="default">array.concat(array2)</code>性能最好</p><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">原理</th><th style="text-align:center;">结论</th><th style="text-align:left;">测试（两个一千万数据合并）</th></tr></thead><tbody><tr><td style="text-align:left;">array.push(...array2)</td><td style="text-align:left;">这种方法通过将第二个数组中的每个元素依次添加到第一个数组中来合并两个数组。这种方法的性能较差是因为每个元素都要进行一次单独的添加操作，这会导致频繁的内存分配和数据的复制</td><td style="text-align:center;">性能较差</td><td style="text-align:left;">Maximum call stack size exceeded</td></tr><tr><td style="text-align:left;">[...array,...array2]</td><td style="text-align:left;">它会将数组 array 和 array2 中的元素解构开，然后再通过数组字面量 [...] 创建一个新的数组，但依然会产生一个新的数组并进行数据复制</td><td style="text-align:center;">性能一般</td><td style="text-align:left;">147.68505859375 ms</td></tr><tr><td style="text-align:left;">array.concat(array2)</td><td style="text-align:left;">concat 方法是在底层优化过的，它会直接将两个数组的引用合并，并创建一个新的数组对象。这样就避免了对每个元素进行复制的开销</td><td style="text-align:center;">性能最好</td><td style="text-align:left;">21.154296875 ms</td></tr></tbody></table><h3 id="_2-数组循环" tabindex="-1">2. 数组循环 <a class="header-anchor" href="#_2-数组循环" aria-label="Permalink to &quot;2. 数组循环&quot;">​</a></h3><p>结论：具体结合实际场景使用， <code class="default">for (let i = 0,len = array.length; i &lt; len; i++){}</code>性能最好，<code class="default">forEach</code>可读性更强且性能也没有太大损失。</p><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">原理</th><th style="text-align:center;">结论</th><th style="text-align:left;">测试（一千万数据）</th></tr></thead><tbody><tr><td style="text-align:left;">for(let i in array){}</td><td style="text-align:left;">它不仅遍历了数组的指定元素，还遍历了数组中的所有可枚举属性，包括数组原型链上继承的可枚举属性。这意味着它会遍历一些不是数组元素的属性，导致额外的开销和性能损耗</td><td style="text-align:center;">性能较差</td><td style="text-align:left;">1299.587890625 ms</td></tr><tr><td style="text-align:left;">array.forEach(item=&gt;{})</td><td style="text-align:left;">使用遍历器迭代数组元素，对每个元素执行指定的回调函数</td><td style="text-align:center;">性能一般</td><td style="text-align:left;">128.465087890625 ms</td></tr><tr><td style="text-align:left;">for(let i = 0;i&lt;array.length;i++){}</td><td style="text-align:left;">使用计数器控制循环次数，通过访问数组索引来访问和操作数组元素</td><td style="text-align:center;">性能一般</td><td style="text-align:left;">97.27001953125 ms</td></tr><tr><td style="text-align:left;">for (let i = 0,len = array.length; i &lt; len; i++){}</td><td style="text-align:left;">先获取数组的长度（len = array.length），然后使用计数器控制循环次数，通过访问数组索引来访问和操作数组元素</td><td style="text-align:center;">性能最好</td><td style="text-align:left;">74.547119140625 ms</td></tr></tbody></table><h3 id="_3-数组去重" tabindex="-1">3. 数组去重 <a class="header-anchor" href="#_3-数组去重" aria-label="Permalink to &quot;3. 数组去重&quot;">​</a></h3><p>结论：使用<code class="default">Set</code>进行去重，可读性高且性能好</p><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">原理</th><th style="text-align:center;">结论</th><th style="text-align:left;">测试（一千万数据）</th></tr></thead><tbody><tr><td style="text-align:left;">array.filter((value, index, self) =&gt; { return self.indexOf(value) === index })</td><td style="text-align:left;"></td><td style="text-align:center;">性能较差</td><td style="text-align:left;">3000.587890625 ms</td></tr><tr><td style="text-align:left;">array.reduce((result, current) =&gt; { if (!result.includes(current)) { result.push(current) } return result }, [])</td><td style="text-align:left;"></td><td style="text-align:center;">性能较好</td><td style="text-align:left;">78.4130859375 ms</td></tr><tr><td style="text-align:left;">Object.keys( array.reduce((obj, value) =&gt; { obj[value] = true return obj }, {}) )</td><td style="text-align:left;"></td><td style="text-align:center;">性能较好</td><td style="text-align:left;">68.533935546875 ms</td></tr><tr><td style="text-align:left;">[...new Set(array)]</td><td style="text-align:left;"></td><td style="text-align:center;">性能较好</td><td style="text-align:left;">57.843017578125 ms</td></tr><tr><td style="text-align:left;">Array.from(new Set(array))</td><td style="text-align:left;">Set中的值是唯一的，Set内部使用类似于哈希表的数据结构，它可以快速查找和插入值，并且可以保持插入值的顺序</td><td style="text-align:center;">性能较好</td><td style="text-align:left;">57.778076171875 ms</td></tr></tbody></table><h3 id="_4-深拷贝" tabindex="-1">4. 深拷贝 <a class="header-anchor" href="#_4-深拷贝" aria-label="Permalink to &quot;4. 深拷贝&quot;">​</a></h3><p>结论：这些深拷贝方式都有各自的优缺点，应根据实际需求选择合适的方法。如果不需要处理循环引用和函数/原型链，使用 <code class="default">JSON 序列化和反序列化</code>仍然是性能最佳的选择。</p><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">原理</th><th style="text-align:center;">结论</th><th style="text-align:left;">测试（一千万数据）</th></tr></thead><tbody><tr><td style="text-align:left;">Object.assign()</td><td style="text-align:left;">当目标对象仅有一层数据时，可以使用 Object.assign() 进行浅拷贝，但需要注意，它在深拷贝复制时仍然会出现引用传递的问题。</td><td style="text-align:center;">性能较差</td><td style="text-align:left;">2840.05126953125 ms</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">递归复制：递归复制是指遍历对象的属性，并逐个复制每个属性的值。递归复制方法可以处理循环引用和函数/原型链</td><td style="text-align:center;">性能较差</td><td style="text-align:left;">1430.828125 ms</td></tr><tr><td style="text-align:left;">JSON.parse(JSON.stringify(array))</td><td style="text-align:left;"></td><td style="text-align:center;">性能较好</td><td style="text-align:left;">473.587890625 ms</td></tr><tr><td style="text-align:left;">[...array]</td><td style="text-align:left;">利用解构创建一个新数组进行深拷贝</td><td style="text-align:center;">性能较好</td><td style="text-align:left;">228.509765625 ms</td></tr></tbody></table>',13)]))}const o=e(r,[["render",n]]);export{c as __pageData,o as default};

import{_ as p,o,c as e,C as n,a,S as l}from"./chunks/framework.7114eebe.js";const u=JSON.parse('{"title":"ChatGPT 打字机消息回复实现原理","description":"","frontmatter":{"title":"ChatGPT 打字机消息回复实现原理","date":"2023/05/16 17:27:30","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["info","js","tool"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/other/ChatGPTDaZiJiXiaoXiHuiFuShiXianYuanLi.md","filePath":"views/blog/other/ChatGPTDaZiJiXiaoXiHuiFuShiXianYuanLi.md"}'),t={name:"views/blog/other/ChatGPTDaZiJiXiaoXiHuiFuShiXianYuanLi.md"},c={class:"markdown-body cache"},r={href:"https://link.juejin.cn?target=https%3A%2F%2Fcaniuse.com%2F%3Fsearch%3DServer%2520-sent%2520events",target:"_blank",title:"https://caniuse.com/?search=Server%20-sent%20events",ref:"nofollow noopener noreferrer"},y={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feventsource",target:"_blank",title:"https://www.npmjs.com/package/eventsource",ref:"nofollow noopener noreferrer"},F={href:"https://link.juejin.cn?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F417142",target:"_blank",title:"https://stackoverflow.com/questions/417142",ref:"nofollow noopener noreferrer"};function D(i,s,B,E,A,d){return o(),e("div",null,[s[14]||(s[14]=n("h6",{id:"原文-掘金",tabindex:"-1"},[a("原文 "),n("a",{href:"https://juejin.cn/post/7229632570374783034",target:"_blank",rel:"noreferrer"},"掘金"),a(),n("a",{class:"header-anchor",href:"#原文-掘金","aria-label":'Permalink to "原文 [掘金](https://juejin.cn/post/7229632570374783034)"'},"​")],-1)),n("div",c,[s[10]||(s[10]=l(`<blockquote><p>🔔概述：</p><p>相较于繁重的 WebSockets，SSE 无疑是 H5 简单即时数据更新的轻量级代替方案。</p></blockquote><h2 id="_1-背景" tabindex="-1">1 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1 背景&quot;">​</a></h2><p>​ 在使用 ChatGPT 时，发现输入 prompt 后，页面是逐步给出回复的，起初以为使用了 WebSckets 持久化连接协议，查看其网络请求，发现这个接口的通信方式并非传统的 http 接口或者 WebSockets，而是基于 EventStream 的事件流，像打字机一样，一段一段的返回答案。</p><p>​ ChatGPT 是一个基于深度学习的大型语言模型，处理自然语言需要大量的计算资源和时间，响应速度肯定比普通的读数据库要慢的多，普通 http 接口等待时间过长，显然并不合适。对于这种单项对话场景，ChagtGPT 将先计算出的数据“推送”给用户，边计算边返回，避免用户因为等待时间过长关闭页面。而这，可以采用 SSE 技术。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5b84e8f12c1411facfe13ca2eadc19d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="2023-04-09 16.09.32" loading="lazy"><h2 id="_2-概述" tabindex="-1">2 概述 <a class="header-anchor" href="#_2-概述" aria-label="Permalink to &quot;2 概述&quot;">​</a></h2><p>​ Server-Sent Events 服务器推送事件，简称 SSE，是一种服务端实时<strong>主动</strong>向浏览器推送消息的技术。</p><p>​ SSE 是 HTML5 中一个与通信相关的 API，主要由两部分组成：服务端与浏览器端的通信协议（<code>HTTP</code> 协议）及浏览器端可供 JavaScript 使用的 <code>EventSource</code> 对象。</p><p>​ 从“服务端主动向浏览器实时推送消息”这一点来看，该 API 与 WebSockets API 有一些相似之处。但是，该 API 与 WebSockers API 的不同之处在于：</p><table><thead><tr><th align="center">Server-Sent Events API</th><th align="center">WebSockets API</th></tr></thead><tbody><tr><td align="center">基于 HTTP 协议</td><td align="center">基于 TCP 协议</td></tr><tr><td align="center">单工，只能服务端单向发送消息</td><td align="center">全双工，可以同时发送和接收消息</td></tr><tr><td align="center">轻量级，使用简单</td><td align="center">相对复杂</td></tr><tr><td align="center">内置断线重连和消息追踪的功能</td><td align="center">不在协议范围内，需手动实现</td></tr><tr><td align="center">文本或使用 Base64 编码和 gzip 压缩的二进制消息</td><td align="center">类型广泛</td></tr><tr><td align="center">支持自定义事件类型</td><td align="center">不支持自定义事件类型</td></tr><tr><td align="center">连接数 HTTP/1.1 6 个，HTTP/2 可协商（默认 100）</td><td align="center">连接数无限制</td></tr></tbody></table><h2 id="_3-服务端实现" tabindex="-1">3 服务端实现 <a class="header-anchor" href="#_3-服务端实现" aria-label="Permalink to &quot;3 服务端实现&quot;">​</a></h2><h3 id="_3-1-协议" tabindex="-1">3.1 协议 <a class="header-anchor" href="#_3-1-协议" aria-label="Permalink to &quot;3.1 协议&quot;">​</a></h3><p>​ SSE 协议非常简单，本质是浏览器发起 http 请求，服务器在收到请求后，返回状态与数据，并附带以下 headers：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> text</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">stream</span></span>
<span class="line"><span style="color:#BABED8;">Cache</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Control</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> no</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">cache</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> keep</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">alive</span></span></code></pre></div><ul><li>SSE API规定推送事件流的 MIME 类型为 <code>text/event-stream</code>。</li><li>必须指定浏览器不缓存服务端发送的数据，以确保浏览器可以实时显示服务端发送的数据。</li><li>SSE 是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive。</li></ul><h3 id="_3-2-消息格式" tabindex="-1">3.2 消息格式 <a class="header-anchor" href="#_3-2-消息格式" aria-label="Permalink to &quot;3.2 消息格式&quot;">​</a></h3><p>​ EventStream（事件流）为 <code>UTF-8</code> 格式编码的<code>文本</code>或使用 Base64 编码和 gzip 压缩的二进制消息。</p><p>​ 每条消息由一行或多行字段（<code>event</code>、<code>id</code>、<code>retry</code>、<code>data</code>）组成，每个字段组成形式为：<code>字段名:字段值</code>。字段以行为单位，每行一个（即以 <code>\\n</code> 结尾）。以<code>冒号</code>开头的行为注释行，会被浏览器忽略。</p><p>​ 每次推送，可由多个消息组成，每个消息之间以空行分隔（即最后一个字段以<code>\\n\\n</code>结尾）。</p><blockquote><p>📢 注意：</p><ul><li>除上述四个字段外，其他所有字段都会被忽略。</li><li>如果一行字段中不包含冒号，则整行文本将被视为字段名，字段值为空。</li><li>注释行可以用来防止链接超时，服务端可以定期向浏览器发送一条消息注释行，以保持连接不断。</li></ul></blockquote><h4 id="_3-2-1-event" tabindex="-1">3.2.1 event <a class="header-anchor" href="#_3-2-1-event" aria-label="Permalink to &quot;3.2.1 event&quot;">​</a></h4><p>​ 事件类型。如果指定了该字段，则在浏览器收到该条消息时，会在当前 <code>EventSource</code> 对象（见 4）上触发一个事件，事件类型就是该字段的字段值。可以使用 <code>addEventListener</code> 方法在当前 <code>EventSource</code> 对象上监听任意类型的命名事件。</p><p>​ 如果该条消息没有 <code>event</code> 字段，则会触发 <code>EventSource</code> 对象 <code>onmessage</code> 属性上的事件处理函数。</p><h4 id="_3-2-2-id" tabindex="-1">3.2.2 id <a class="header-anchor" href="#_3-2-2-id" aria-label="Permalink to &quot;3.2.2 id&quot;">​</a></h4><p>​ 事件ID。事件的唯一标识符，浏览器会跟踪事件ID，如果发生断连，浏览器会把收到的最后一个事件ID放到 HTTP Header <code>Last-Event-Id</code> 中进行重连，作为一种简单的同步机制。</p><p>​ 例如可以在服务端将每次发送的事件ID值自动加 1，当浏览器接收到该事件ID后，下次与服务端建立连接后再请求的 Header 中将同时提交该事件ID，服务端检查该事件ID是否为上次发送的事件ID，如果与上次发送的事件ID不一致则说明浏览器存在与服务器连接失败的情况，本次需要同时发送前几次浏览器未接收到的数据。</p><h4 id="_3-2-3-retry" tabindex="-1">3.2.3 retry <a class="header-anchor" href="#_3-2-3-retry" aria-label="Permalink to &quot;3.2.3 retry&quot;">​</a></h4><p>​ 重连时间。整数值，单位 ms，如果与服务器的连接丢失，浏览器将等待指定时间，然后尝试重新连接。如果该字段不是整数值，会被忽略。</p><p>​ 当服务端没有指定浏览器的重连时间时，由浏览器自行决定每隔多久与服务端建立一次连接（一般为 30s）。</p><h4 id="_3-2-4-data" tabindex="-1">3.2.4 data <a class="header-anchor" href="#_3-2-4-data" aria-label="Permalink to &quot;3.2.4 data&quot;">​</a></h4><p>​ 消息数据。数据内容只能以一个字符串的文本形式进行发送，如果需要发送一个对象时，需要将该对象以一个 JSON 格式的字符串的形式进行发送。在浏览器接收到该字符串后，再把它还原为一个 JSON 对象。</p><h3 id="_3-3-示例" tabindex="-1">3.3 示例 <a class="header-anchor" href="#_3-3-示例" aria-label="Permalink to &quot;3.3 示例&quot;">​</a></h3><p>​ 如下事件流示例，共发送了 4 条消息，每条消息间以一个空行作为分隔符。</p><p>​ 第一条仅仅是个注释，因为它以冒号开头。</p><p>​ 第二条消息只包含一个 data 字段，值为 &#39;this is second message&#39;。</p><p>​ 第三条消息包含两个 data 字段，其会被解析为一个字段，值为 &#39;this is third message part 1\\nthis is third message part 2&#39;。</p><p>​ 第四条消息包含完整四个字段，指定了事件类型为 &#39;server-time&#39;，事件id 为 &#39;1&#39;，重连时间为 &#39;30000&#39;ms，消息数据为 <code>JSON</code> 格式的 &#39;{&quot;text&quot;: &quot;this is fourth message&quot;, &quot;time&quot;: &quot;12:00:00&quot;}&#39;。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> is first message\\n\\n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> is second message\\n\\n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> is third message part one\\n</span></span>
<span class="line"><span style="color:#BABED8;">data </span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> is third message part two\\n\\n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">event</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> server</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">time\\n</span></span>
<span class="line"><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">retry</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">30000</span><span style="color:#BABED8;">\\n</span></span>
<span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this is fourth message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">time</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2023-04-09 12:00:00</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">\\n\\n</span></span></code></pre></div><h2 id="_4-浏览器-api" tabindex="-1">4 浏览器 API <a class="header-anchor" href="#_4-浏览器-api" aria-label="Permalink to &quot;4 浏览器 API&quot;">​</a></h2><p>​ 在浏览器端，可以使用 JavaScript 的 EventSource API 创建 <code>EventSource</code> 对象监听服务器发送的事件。一旦建立连接，服务器就可以使用 HTTP 响应的 &#39;text/event-stream&#39; 内容类型发送事件消息，浏览器则可以通过监听 EventSource 对象的 <code>onmessage</code>、<code>onopen</code> 和 <code>onerror</code> 事件来处理这些消息。</p><h3 id="_4-1-建立连接" tabindex="-1">4.1 建立连接 <a class="header-anchor" href="#_4-1-建立连接" aria-label="Permalink to &quot;4.1 建立连接&quot;">​</a></h3><p>​ EventSource 接受两个参数：URL 和 options。</p><p>​ URL 为 http 事件来源，一旦 EventSource 对象被创建后，浏览器立即开始对该 URL 地址发送过来的事件进行监听。</p><p>​ options 是一个可选的对象，包含 withCredentials 属性，表示是否发送凭证（cookie、HTTP认证信息等）到服务端，默认为 false。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> eventSource </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">EventSource</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http_api_url</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">withCredentials</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>​ 与 XMLHttpRequest 对象类型，EventSource 对象有一个 readyState 属性值，具体含义如下表：</p><table><thead><tr><th align="center">readyState</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">浏览器与服务端尚未建立连接或连接已被关闭</td></tr><tr><td align="center">1</td><td align="center">浏览器与服务端已成功连接，浏览器正在处理接收到的事件及数据</td></tr><tr><td align="center">2</td><td align="center">浏览器与服务端建立连接失败，客户端不再继续建立与服务端之间的连接</td></tr></tbody></table><p>​ 可以使用 EventSource 对象的 <code>close</code> 方法关闭与服务端之间的连接，使浏览器不再建立与服务端之间的连接。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化 eventSource 等省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 关闭连接</span></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#BABED8;">()</span></span></code></pre></div><h3 id="_4-2-监听事件" tabindex="-1">4.2 监听事件 <a class="header-anchor" href="#_4-2-监听事件" aria-label="Permalink to &quot;4.2 监听事件&quot;">​</a></h3><p>​ EventSource 对象本身继承自 EventTarget 接口，因此可以使用 addEventListener() 方法来监听事件。EventSource 对象触发的事件主要包括以下三种：</p><ul><li>open 事件：当成功连接到服务端时触发。</li><li>message 事件：当接收到服务器发送的消息时触发。该事件对象的 data 属性包含了服务器发送的消息内容。</li><li>error 事件：当发生错误时触发。该事件对象的 event 属性包含了错误信息。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化 eventSource 等省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection opened</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 监听自定义事件</span></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error occurred: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">event</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>​ 当然，也可以采用属性监听（<code>onopen</code>、<code>onmessage</code>、<code>onerror</code>）的形式。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> 初始化 eventSource 等省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onopen</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection opened</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received message: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">eventSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error occurred: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">event</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><blockquote><p>📢注意：</p><p><code>EventSource</code> 对象的属性监听只能监听预定义的事件类型（<code>open</code>、<code>message</code>、<code>error</code>）。不能用于监听自定义事件类型。如果要实现自定义事件类型的监听，可以使用 <code>addEventListener()</code> 方法。</p></blockquote><h2 id="_5-实践" tabindex="-1">5 实践 <a class="header-anchor" href="#_5-实践" aria-label="Permalink to &quot;5 实践&quot;">​</a></h2><h3 id="_5-1-服务端" tabindex="-1">5.1 服务端 <a class="header-anchor" href="#_5-1-服务端" aria-label="Permalink to &quot;5.1 服务端&quot;">​</a></h3><p>​ 使用 Node.js 实现 SSE 的简单示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#BABED8;">((req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> res) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  const url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">url</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">url</span><span style="color:#BABED8;"> === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> || </span><span style="color:#BABED8;font-style:italic;">url</span><span style="color:#BABED8;"> === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求根路径，返回 index.html 文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error loading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> else </span><span style="color:#F07178;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">url.includes(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/sse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求 /events 路径，建立 SSE 连接</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/event-stream</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keep-alive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Access-Control-Allow-Origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 允许跨域</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每隔 1 秒发送一条消息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">intervalId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(() </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">event: customEvent</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">id: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      res.write(</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">retry: 30000</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      const params = url.split(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)[1]</span></span>
<span class="line"><span style="color:#F07178;">      const data = { id, time</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toISOString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">params</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">data: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(data)</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">;</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        clearInterval</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">intervalId</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        res.end</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    }</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当客户端关闭连接时停止发送消息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      clearInterval</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">intervalId</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">      id = 0</span></span>
<span class="line"><span style="color:#F07178;">      res.end</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求的路径无效，返回 404 状态码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server listening on port 3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="_5-2-浏览器" tabindex="-1">5.2 浏览器 <a class="header-anchor" href="#_5-2-浏览器" aria-label="Permalink to &quot;5.2 浏览器&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">&amp;lt;!DOCTYPE html&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;html lang=&quot;en&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;head&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;title&amp;gt;SSE Demo&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;body&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;h1&amp;gt;SSE Demo&amp;lt;/h1&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;button onclick=&quot;connectSSE()&quot;&amp;gt;建立 SSE 连接&amp;lt;/button&amp;gt;  </span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;button onclick=&quot;closeSSE()&quot;&amp;gt;断开 SSE 连接&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;br /&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;br /&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;div id=&quot;message&quot;&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;script&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">    const messageElement = document.getElementById(&#39;message&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    let eventSource</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    // 建立 SSE 连接</span></span>
<span class="line"><span style="color:#BABED8;">    const connectSSE = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">      eventSource = new EventSource(&#39;http://127.0.0.1:3000/sse?content=xxx&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      // 监听消息事件</span></span>
<span class="line"><span style="color:#BABED8;">      eventSource.addEventListener(&#39;customEvent&#39;, (event) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">        const data = JSON.parse(event.data)</span></span>
<span class="line"><span style="color:#BABED8;">        messageElement.innerHTML += \`\${data.id} --- \${data.time} --- params参数：\${JSON.stringify(data.params)}\` + &#39;&amp;lt;br /&amp;gt;&#39;</span></span>
<span class="line"><span style="color:#BABED8;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      eventSource.onopen = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">        messageElement.innerHTML += \`SSE 连接成功，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      eventSource.onerror = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">        messageElement.innerHTML += \`SSE 连接错误，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">      }</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    // 断开 SSE 连接</span></span>
<span class="line"><span style="color:#BABED8;">    const closeSSE = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">      eventSource.close()</span></span>
<span class="line"><span style="color:#BABED8;">      messageElement.innerHTML += \`SSE 连接关闭，状态\${eventSource.readyState}&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;/script&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/body&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/html&amp;gt;</span></span></code></pre></div><p>​ 将上面的两份代码保存为 <code>server.js</code> 和 <code>index.html</code>，并在命令行中执行 <code>node server.js</code> 启动服务端，然后在浏览器中打开 <code>http://localhost:3000</code> 即可看到 SSE 效果。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4afccb9879064c06b664607588697b09~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="2023-05-09 21.12.02" loading="lazy"><h2 id="_6-兼容性" tabindex="-1">6 兼容性 <a class="header-anchor" href="#_6-兼容性" aria-label="Permalink to &quot;6 兼容性&quot;">​</a></h2>`,65)),n("p",null,[s[0]||(s[0]=a("​ 发展至今，SSE 已具有广泛的的浏览器")),n("a",r,"兼容性",512),s[1]||(s[1]=a("，几乎除 IE 之外的浏览器均已支持。"))]),s[11]||(s[11]=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eff4e8ec907d4460a412e5b669a39ef0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image",alt:"image-20230409024847028",loading:"lazy"})],-1)),n("p",null,[s[2]||(s[2]=a("​ 对于不支持 EventSource 的浏览器，可以使用 ")),n("a",y,"polyfill",512),s[3]||(s[3]=a(" 实现。判断浏览器是否支持 EventSource："))]),s[12]||(s[12]=l(`<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;">(EventSource) </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> “</span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;">”) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 支持</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 不支持，使用 polyfill</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_7-fetch-实现" tabindex="-1">7 Fetch 实现 <a class="header-anchor" href="#_7-fetch-实现" aria-label="Permalink to &quot;7 Fetch 实现&quot;">​</a></h2>`,2)),n("p",null,[s[4]||(s[4]=a("​ 虽然使用 SSE 技术可以实现 ChatGPT 一样的打字机效果，但是通过上文请求 type 对比可以发现，在使用 SSE 时，type 为 ")),s[5]||(s[5]=n("code",null,"eventSource",-1)),s[6]||(s[6]=a("，而 ChatGPT 为 ")),s[7]||(s[7]=n("code",null,"fetch",-1)),s[8]||(s[8]=a("。且受浏览器 EventSource API 限制，在使用 SSE 时不能自定义请求头、只能发出 GET 请求，且在大多数浏览器中，URL 限制 ")),n("a",F,"2000个字符",512),s[9]||(s[9]=a("，也无法满足 ChatGPT 参数传递需求。"))]),s[13]||(s[13]=l(`<p>​ 此时，可以使用 Fetch API 实现一个替代接口，用于<strong>模拟</strong> SSE 实现。简单实现如下：</p><h3 id="_7-1-服务端" tabindex="-1">7.1 服务端 <a class="header-anchor" href="#_7-1-服务端" aria-label="Permalink to &quot;7.1 服务端&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#BABED8;">((req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> res) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  const url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">url</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">url</span><span style="color:#BABED8;"> === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> || </span><span style="color:#BABED8;font-style:italic;">url</span><span style="color:#BABED8;"> === </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index-fetch.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求根路径，返回 ndex-fetch.html 文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index-fetch.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error loading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> else </span><span style="color:#F07178;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">url.includes(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/fetch-sse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求 /events-fetch 路径，建立连接</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/event-stream</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keep-alive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Access-Control-Allow-Origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 允许跨域</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">body</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">chunk</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      body += </span><span style="color:#BABED8;">chunk</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每隔 1 秒发送一条消息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">intervalId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(() </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      const </span><span style="color:#BABED8;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toISOString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> body</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">body</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      res.write(JSON.stringify(data))</span></span>
<span class="line"><span style="color:#F07178;">      id++</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">id</span><span style="color:#F07178;"> &amp;</span><span style="color:#BABED8;font-style:italic;">gt</span><span style="color:#F07178;">;</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">intervalId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当客户端关闭连接时停止发送消息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#F07178;">; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      clearInterval</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">intervalId</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">      id = 0</span></span>
<span class="line"><span style="color:#F07178;">      res.end</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果请求的路径无效，返回 404 状态码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3001</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server listening on port 3001</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="_7-2-浏览器" tabindex="-1">7.2 浏览器 <a class="header-anchor" href="#_7-2-浏览器" aria-label="Permalink to &quot;7.2 浏览器&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">&amp;lt;!DOCTYPE html&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;html lang=&quot;en&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;head&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;title&amp;gt;fetchSSE Demo&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;body&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;h1&amp;gt;fetchSSE Demo&amp;lt;/h1&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;button onclick=&quot;connectFetch()&quot;&amp;gt;建立 fetchSSE 连接&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;button onclick=&quot;closeSSE()&quot;&amp;gt;断开 fetchSSE 连接&amp;lt;/button&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;br /&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;br /&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;div id=&quot;message&quot;&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  &amp;lt;script&amp;gt;</span></span>
<span class="line"><span style="color:#BABED8;">    const messageElement = document.getElementById(&#39;message&#39;)</span></span>
<span class="line"><span style="color:#BABED8;">    let controller</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    // 建立 FETCH-SSE 连接</span></span>
<span class="line"><span style="color:#BABED8;">    const connectFetch = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">      controller = new AbortController()</span></span>
<span class="line"><span style="color:#BABED8;">      fetchEventSource(&#39;http://127.0.0.1:3001/fetch-sse&#39;, {</span></span>
<span class="line"><span style="color:#BABED8;">        method: &#39;POST&#39;,</span></span>
<span class="line"><span style="color:#BABED8;">        body: JSON.stringify({</span></span>
<span class="line"><span style="color:#BABED8;">          content: &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#BABED8;">        }),</span></span>
<span class="line"><span style="color:#BABED8;">        signal: controller.signal,</span></span>
<span class="line"><span style="color:#BABED8;">        onopen: () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          messageElement.innerHTML += \`FETCH 连接成功&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">        },</span></span>
<span class="line"><span style="color:#BABED8;">        onclose: () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          messageElement.innerHTML += \`FETCH 连接关闭&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">        },</span></span>
<span class="line"><span style="color:#BABED8;">        onmessage: (event) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          const data = JSON.parse(event)</span></span>
<span class="line"><span style="color:#BABED8;">          messageElement.innerHTML += \`\${data.id} --- \${data.time} --- body参数：\${JSON.stringify(data.body)}\` + &#39;&amp;lt;br /&amp;gt;&#39;</span></span>
<span class="line"><span style="color:#BABED8;">        },</span></span>
<span class="line"><span style="color:#BABED8;">        onerror: (e) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          console.log(e)</span></span>
<span class="line"><span style="color:#BABED8;">        }</span></span>
<span class="line"><span style="color:#BABED8;">      })</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    // 断开 FETCH-SSE 连接</span></span>
<span class="line"><span style="color:#BABED8;">    const closeSSE = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">      if (controller) {</span></span>
<span class="line"><span style="color:#BABED8;">        controller.abort()</span></span>
<span class="line"><span style="color:#BABED8;">        controller = undefined</span></span>
<span class="line"><span style="color:#BABED8;">        messageElement.innerHTML += \`FETCH 连接关闭&amp;lt;br /&amp;gt;\`</span></span>
<span class="line"><span style="color:#BABED8;">      }</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    const fetchEventSource = (url, options) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">      fetch(url, options)</span></span>
<span class="line"><span style="color:#BABED8;">        .then(response =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          if (response.status === 200) {</span></span>
<span class="line"><span style="color:#BABED8;">            options.onopen &amp;amp;&amp;amp; options.onopen()</span></span>
<span class="line"><span style="color:#BABED8;">            return response.body</span></span>
<span class="line"><span style="color:#BABED8;">          }</span></span>
<span class="line"><span style="color:#BABED8;">        })</span></span>
<span class="line"><span style="color:#BABED8;">        .then(rb =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          const reader = rb.getReader()</span></span>
<span class="line"><span style="color:#BABED8;">            const push = () =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">              // done 为数据流是否接收完成，boolean</span></span>
<span class="line"><span style="color:#BABED8;">              // value 为返回数据，Uint8Array</span></span>
<span class="line"><span style="color:#BABED8;">              return reader.read().then(({done, value}) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">                if (done) {</span></span>
<span class="line"><span style="color:#BABED8;">                  options.onclose &amp;amp;&amp;amp; options.onclose()</span></span>
<span class="line"><span style="color:#BABED8;">                  return</span></span>
<span class="line"><span style="color:#BABED8;">                }</span></span>
<span class="line"><span style="color:#BABED8;">                options.onmessage &amp;amp;&amp;amp; options.onmessage(new TextDecoder().decode(value))</span></span>
<span class="line"><span style="color:#BABED8;">                // 持续读取流信息</span></span>
<span class="line"><span style="color:#BABED8;">                return push()</span></span>
<span class="line"><span style="color:#BABED8;">              })</span></span>
<span class="line"><span style="color:#BABED8;">            }</span></span>
<span class="line"><span style="color:#BABED8;">            // 开始读取流信息</span></span>
<span class="line"><span style="color:#BABED8;">            return push()</span></span>
<span class="line"><span style="color:#BABED8;">        })</span></span>
<span class="line"><span style="color:#BABED8;">        .catch((e) =&amp;gt; {</span></span>
<span class="line"><span style="color:#BABED8;">          options.error &amp;amp;&amp;amp; options.error(e)</span></span>
<span class="line"><span style="color:#BABED8;">        })</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/script&amp;gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">&amp;lt;/html&amp;gt;</span></span></code></pre></div><blockquote><p>💡不同于 <code>XMLHttpRequest</code>，<code>fetch</code> 并未原生提供终止操作方法，可以通过 DOM API <code>[AbortController](https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController)</code> 和 <code>AbortSignal</code> 实现 fetch 请求终止操作。</p></blockquote><p>​ 将上面的两份代码保存为 <code>server-fetch.js</code> 和 <code>index-fetch.html</code>，并在命令行中执行 <code>node server-fetch.js</code> 启动服务端，然后在浏览器中打开 <code>http://localhost:3001</code> 即可看到 fetch 版 SSE 效果。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74bc1bbfcbf347fea8e09db768460e38~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="2023-05-09 21.14.46" loading="lazy"><h2 id="_8-总结" tabindex="-1">8 总结 <a class="header-anchor" href="#_8-总结" aria-label="Permalink to &quot;8 总结&quot;">​</a></h2><p>​ SSE 技术是一种轻量级的实时通信技术，基于 HTTP 协议，具有服务端推送、断线重连、简单轻量等优点。但是，SSE 技术也有一些缺点，如不能进行双向通信、连接数受限、仅支持 get 请求等。</p><p>​ SSE 可以在 Web 应用程序中实现诸如股票在线数据、日志推送、聊天室实时人数等即时数据推送功能。需要注意的是，SSE 并不是适用于所有的实时推送场景。在需要高并发、高吞吐量和低延迟的场景下，WebSockets 可能更加适合。而在需要更轻量级的推送场景下，SSE 可能更加适合。因此，在选择即时更新方案时，需要根据具体的需求和场景进行选择。</p>`,11))])])}const h=p(t,[["render",D]]);export{u as __pageData,h as default};

import{_ as p,o,c as e,S as l,C as a,a as n}from"./chunks/framework.7114eebe.js";const h=JSON.parse('{"title":"微信都在用的开源动效方案【PAG动效】","description":"","frontmatter":{"title":"微信都在用的开源动效方案【PAG动效】","date":"2023/04/19 10:26:50","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js","css","info"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/WeiXinDuZaiYongDeKaiYuanDongXiaoFangAnPAGDongXiao.md","filePath":"views/blog/js/WeiXinDuZaiYongDeKaiYuanDongXiaoFangAnPAGDongXiao.md"}'),t={name:"views/blog/js/WeiXinDuZaiYongDeKaiYuanDongXiaoFangAnPAGDongXiao.md"},r={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flibpag%2Fpag-web",target:"_blank",title:"https://github.com/libpag/pag-web",ref:"nofollow noopener noreferrer"},c={href:"https://link.juejin.cn?target=http%3A%2F%2Fmpvideo.qpic.cn%2F0bc3g4aaeaaaqaadu7bq5jsfan6dai3qaaqa.f10002.mp4%3Fdis_k%3D23d104a835906bbb6c7dcf8dcb6e40b0%26dis_t%3D1681203904%26play_scene%3D10120%26auth_info%3DdsLs%2B4Z9J0oT3tLLyxl3KzgSEm5deDo%2BFBgrYU55PD5Qa2A%3D%26auth_key%3D9a834d6e7bbfe37ed547d5bc6e5f2f4d%26vid%3Dwxv_2873762220688621570%26format_id%3D10002%26support_redirect%3D0%26mmversion%3Dfalse",target:"_blank",title:"http://mpvideo.qpic.cn/0bc3g4aaeaaaqaadu7bq5jsfan6dai3qaaqa.f10002.mp4?dis_k=23d104a835906bbb6c7dcf8dcb6e40b0&dis_t=1681203904&play_scene=10120&auth_info=dsLs+4Z9J0oT3tLLyxl3KzgSEm5deDo+FBgrYU55PD5Qa2A=&auth_key=9a834d6e7bbfe37ed547d5bc6e5f2f4d&vid=wxv_2873762220688621570&format_id=10002&support_redirect=0&mmversion=false",ref:"nofollow noopener noreferrer"},i={href:"https://link.juejin.cn?target=https%3A%2F%2Fpag.art%2Fdocs%2Fsdk.html",target:"_blank",title:"https://pag.art/docs/sdk.html",ref:"nofollow noopener noreferrer"},y={href:"https://link.juejin.cn?target=https%3A%2F%2Fpag.art%2Fdocs%2Fsdk-web.html",target:"_blank",title:"https://pag.art/docs/sdk-web.html",ref:"nofollow noopener noreferrer"},F={href:"https://link.juejin.cn?target=https%3A%2F%2Fpag.art%2Fdocs%2Fsdk-miniprogram.html",target:"_blank",title:"https://pag.art/docs/sdk-miniprogram.html",ref:"nofollow noopener noreferrer"},D={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FTencent%2Flibpag",target:"_blank",title:"https://github.com/Tencent/libpag",ref:"nofollow noopener noreferrer"},A={href:"https://link.juejin.cn?target=https%3A%2F%2Fpag.art%2Fdocs%2Finstall.html",target:"_blank",title:"https://pag.art/docs/install.html",ref:"nofollow noopener noreferrer"},d={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FTencent%2Flibpag",target:"_blank",title:"https://github.com/Tencent/libpag",ref:"nofollow noopener noreferrer"};function b(B,s,g,f,m,E){return o(),e("div",null,[s[6]||(s[6]=l(`<h6 id="原文-掘金" tabindex="-1">原文 <a href="https://juejin.cn/post/7220698356775567417" target="_blank" rel="noreferrer">掘金</a> <a class="header-anchor" href="#原文-掘金" aria-label="Permalink to &quot;原文 [掘金](https://juejin.cn/post/7220698356775567417)&quot;">​</a></h6><img loading="eager" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3aed2707b94840d8b731576325970993~tplv-k3u1fbpfcp-zoom-crop-mark:1512:1512:1512:851.awebp?" alt="微信都在用的开源动效方案【PAG动效】" class="lazy article-hero" data-v-248050e4="" data-v-0083c6d0=""><h3 id="_1-pag-是什么" tabindex="-1">1.  PAG 是什么? <a class="header-anchor" href="#_1-pag-是什么" aria-label="Permalink to &quot;1.&amp;nbsp; PAG 是什么?&quot;">​</a></h3><p>在 web 中实现一个动画， css animation 声明一下各个时间点的样式就好了， 写起来并不麻烦。 但是当设计给的动画越来越复杂, 还原度要求越来越高的情况下, 单纯依赖 css 写动画就显得捉襟见肘了。 比如下面这些动画:</p><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3cb673b7f1d4aafae3870d3d65d4b81~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image.gif" loading="lazy"></p> 对于这些动画，通常都有一套完整的动效解决方案。设计师在 AE 中设计好动画的表现形式，导出一个文件，开发在 web 或者其它端 (安卓/iOS 等) 通过 sdk 加载这个文件。不需要自己写 css 代码，就能把动画渲染出来。 <p>而 PAG 就是这样一套解决方案。</p><p>它提供了从 AE 导出的插件，桌面端预览的 PAGViewer，以及各端跨平台的渲染 SDK，包括 Web，Andorid，macOS，Windows，Linux 和小程序。</p><p>当面对复杂的动效时，我们直接加载设计师给的动效文件，通过 sdk 就能把动画渲染出来，所见即所得，再也不用反复跟设计争论还原细节以及实现的难易程度。</p><p>我们来看一段基本的 demo：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.jsdelivr.net/npm/libpag@latest/lib/libpag.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 实例化 PAG</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">PAG</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">libpag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PAGInit</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取 PAG 素材数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../assets/test.pag</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 加载 PAG 素材为 PAGFile 对象</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pagFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">PAG</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">PAGFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">buffer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将画布尺寸设置为 PAGFile的尺寸</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">canvas</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pag</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">canvas</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pagFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">width</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">canvas</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">height</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pagFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">height</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 实例化 PAGView 对象</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pagView</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">PAG</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">PAGView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">pagFile</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">canvas</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 播放 PAGView</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pagView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,11)),a("p",null,[s[0]||(s[0]=n("没错, 就是这么简单, 就能将一个复杂的动画渲染出来。（感兴趣的朋友可以到PAG的开源仓库下载Web Demo Code自己试一下：")),a("a",r,"github.com/libpag/pag-…",512),s[1]||(s[1]=n("）"))]),s[7]||(s[7]=l('<p>PAG 是腾讯开源的一款动效解决方案，已经接入了腾讯内外 600 多款应用，包括微信, 手机QQ，王者荣耀等等。如果你玩王者的话，这些你看到的动效，就是 PAG 渲染出来的：</p><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/298c4d76836b46bcb083ec4896659b5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image?" alt="image (1).gif" loading="lazy"></p> 接下来, 我们来看看 PAG 的工作流以及具体的使用方式。 <h3 id="_2-pag动效工作流简介" tabindex="-1">2.  PAG动效工作流简介 <a class="header-anchor" href="#_2-pag动效工作流简介" aria-label="Permalink to &quot;2.&amp;nbsp; PAG动效工作流简介&quot;">​</a></h3><h4 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h4><p>PAG 动效工作流主要包含 AE 导出插件 PAGExporter、桌面端预览工具 PAGViewer和各平台端的 PAG SDK 三部分。 PAG 的工作流程图如下，设计师在 AE 中设计出动效后，通过导出插件导出 pag 文件，同时 PAG 提供了桌面端预览工具，支持实时预览效果，在确认效果后，通过运营配置上线，各平台终端可以通过 PAG SDK 加载渲染 pag 动效。<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4b357d726ef4ef9accf5c57b2bf4dca~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="" loading="lazy"></p><p>PAG动画工作流流程图</p><h4 id="pag-的技术优势" tabindex="-1">PAG 的技术优势 <a class="header-anchor" href="#pag-的技术优势" aria-label="Permalink to &quot;PAG 的技术优势&quot;">​</a></h4><p>通过阅读 PAG 官方提供的资料，相对比 Lottie 和 SVGA， PAG 具有以下技术优势：</p><h5 id="_1-文件更小" tabindex="-1">1）  文件更小 <a class="header-anchor" href="#_1-文件更小" aria-label="Permalink to &quot;1）&amp;nbsp; 文件更小&quot;">​</a></h5><p>PAG采用针对 AE 时间轴属性设计的二进制文件编码器，能够使用动态比特位紧凑存储，冗余信息极少，文件体积最小，解码速度最快，且支持单文件集成图片和音频等外部资源。</p><h5 id="_2-全-ae-特性支持" tabindex="-1">2）  全 AE 特性支持 <a class="header-anchor" href="#_2-全-ae-特性支持" aria-label="Permalink to &quot;2）&amp;nbsp; 全 AE 特性支持&quot;">​</a></h5><p>在纯矢量的导出模式下，无论是哪种实现方案，在众多的 AE 特性面前，都只支持将有限的 AE特性导出渲染，PAG 方案提供了 BMP 预合成的解决方案，支持将特定图层截图导出成透明视频，实现了对于所有 AE 特性导出的支持。</p><h5 id="_3-运行时编辑" tabindex="-1">3）  运行时编辑 <a class="header-anchor" href="#_3-运行时编辑" aria-label="Permalink to &quot;3）&amp;nbsp; 运行时编辑&quot;">​</a></h5><p>PAG 不仅仅支持文本图层的文本编辑、图片图层的占位图替换，还支持图层级别的增加、删除及更改渲染位置，实现原子素材的自由组合，典型的应用场景就是视频模版和游戏战报，一个模版中由多个 pag 有机组合在一起。</p><h5 id="_4-渲染架构" tabindex="-1">4）  渲染架构 <a class="header-anchor" href="#_4-渲染架构" aria-label="Permalink to &quot;4）&amp;nbsp; 渲染架构&quot;">​</a></h5><p>相对于 Lottie 、SVGA 依赖于平台端相关的渲染接口，PAG 使用了跨平台一致的 C++ 架构，平台层面仅仅提供渲染环境，渲染的主体位于 C++ 层，可以实现跨平台的渲染一致性。</p><h5 id="_5-支持的平台更多" tabindex="-1">5）  支持的平台更多 <a class="header-anchor" href="#_5-支持的平台更多" aria-label="Permalink to &quot;5）&amp;nbsp; 支持的平台更多&quot;">​</a></h5><p>相比 Lottie 支持 Android、iOS、Web 和 macOS， SVGA 支持 Android、iOS、Web，PAG 实现了 Android、iOS、Web、macOS、Windows、Linux 和 微信小程序，支持的平台更多。</p>',19)),a("p",null,[s[2]||(s[2]=n("另外为了方便大家了解PAG的功能和场景，在这里放上一个官方的介绍视频，2分钟看懂PAG的全貌： ")),a("a",c,"mpvideo.qpic.cn/0bc3g4aaeaa…",512)]),s[8]||(s[8]=a("h3",{id:"_3、pag-sdk-的使用",tabindex:"-1"},[n("3、PAG SDK 的使用 "),a("a",{class:"header-anchor",href:"#_3、pag-sdk-的使用","aria-label":'Permalink to "3、PAG SDK 的使用"'},"​")],-1)),s[9]||(s[9]=a("h4",{id:"pag-sdk-接入",tabindex:"-1"},[n("PAG SDK 接入 "),a("a",{class:"header-anchor",href:"#pag-sdk-接入","aria-label":'Permalink to "PAG SDK 接入"'},"​")],-1)),s[10]||(s[10]=a("p",null,"在 Android、iOS、Web 和微信小程序平台，PAG 提供了制品库供接入使用。",-1)),s[11]||(s[11]=a("p",null,"具体接入方式可以参考：",-1)),a("p",null,[a("a",i,"移动端接入指南 · PAG官网|PAG动效",512)]),a("p",null,[a("a",y,"Web端接入指南 · PAG官网|PAG动效",512)]),a("p",null,[a("a",F,"小程序端接入指南 · PAG官网|PAG动效",512)]),s[12]||(s[12]=a("p",null,"macOS 和 Windows 平台，由于不同业务使用的 UI 架构不一样，Linux 平台由于环境及 CPU 型号的差异，这些平台需要通过 PAG 的源码自己构建库文件，构建方法可以参考 README。",-1)),a("p",null,[s[3]||(s[3]=n("PAG 的开源地址：")),a("a",D,"github.com/Tencent/lib…",512)]),s[13]||(s[13]=a("h4",{id:"如何让你的设计师同事快速使用",tabindex:"-1"},[n("如何让你的设计师同事快速使用 "),a("a",{class:"header-anchor",href:"#如何让你的设计师同事快速使用","aria-label":'Permalink to "如何让你的设计师同事快速使用"'},"​")],-1)),s[14]||(s[14]=a("p",null,"下载安装PAG相关的插件：PAGViewer、PAG的AE导出插件。",-1)),s[15]||(s[15]=a("p",null,"花几分钟了解下PAG的导出规则，就可以开始使用了。",-1)),a("p",null,[s[4]||(s[4]=n("具体的下载指引和规则参考官网：")),a("a",A,"pag.art/docs/instal…",512)]),s[16]||(s[16]=l(`<p>里面同时还有非常易学详尽的进阶使用教程，真的可以说非常良心。</p><h4 id="pag-常用方法解读" tabindex="-1">PAG 常用方法解读 <a class="header-anchor" href="#pag-常用方法解读" aria-label="Permalink to &quot;PAG 常用方法解读&quot;">​</a></h4><p>这里整理好使用方法的代码，便于大家接入后能快速理解和上手使用：</p><h5 id="pag-运行时编辑" tabindex="-1">PAG 运行时编辑 <a class="header-anchor" href="#pag-运行时编辑" aria-label="Permalink to &quot;PAG 运行时编辑&quot;">​</a></h5><p>PAG 的运行时编辑主要分为两类： 1）修改文本图层的文本信息、替换图片图层中的占位图</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">pagFile</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> await PAG.PAGFile.load(buffer)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">// Get TextDate by editableIndex.</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">textData</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> pagFile.getTextData(0)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">// Modify textData by editableIndex.</span></span>
<span class="line"><span style="color:#F07178;">textData.text</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile.replaceText(0, textData)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">// Ensure image is loaded.</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">image</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> await new Promise((resolve) =&amp;gt</span><span style="color:#676E95;font-style:italic;">; {</span></span>
<span class="line"><span style="color:#BABED8;">  const </span><span style="color:#F07178;">img</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> new Image()</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">img.onload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> () =&amp;gt</span><span style="color:#676E95;font-style:italic;">; resolve(img);</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">img.src</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../assets/cat.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">})</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">// Replace Image by editableIndex.</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">pagImage</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> await PAG.PAGImage.fromSource(image)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile.replaceImage(0, pagImage)</span><span style="color:#676E95;font-style:italic;">;</span></span></code></pre></div><p>2）渲染树编辑</p><p>渲染树编辑指的是通过使用 PAGComposition 的相关接口，完成多个图层、多个 pag 文件的自由组合。具体如何使用可以参考下面的代码：</p><div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Fetch pag file.</span></span>
<span class="line"><span style="color:#BABED8;">const [buffer1, buffer2] = await Promise.all([</span></span>
<span class="line"><span style="color:#BABED8;">  fetch(&#39;../assets/like.pag&#39;).then((response) =</span><span style="color:#FFCB6B;">&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> response.arrayBuffer()),</span></span>
<span class="line"><span style="color:#BABED8;">  fetch(&#39;../assets/snowman.pag&#39;).then((response) =</span><span style="color:#FFCB6B;">&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> response.arrayBuffer()),</span></span>
<span class="line"><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Load the PAGFile from file.</span></span>
<span class="line"><span style="color:#BABED8;">const [pagFile1, pagFile2] = await Promise.all([PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">PAGFile</span><span style="color:#BABED8;">.load(buffer1), PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">PAGFile</span><span style="color:#BABED8;">.load(buffer2)])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Make new PAGComposition.</span></span>
<span class="line"><span style="color:#BABED8;">const pagComposition = PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">PAGComposition</span><span style="color:#BABED8;">.make(1080, 1080)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Add PAGFile as PAGLayer to PAGComposition.</span></span>
<span class="line"><span style="color:#BABED8;">pagComposition.addLayer(pagFile1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Make scale matrix</span></span>
<span class="line"><span style="color:#BABED8;">const matrix1 = PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Matrix</span><span style="color:#BABED8;">.makeScale(2, 2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile1.setMatrix(matrix1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Add PAGFile as PAGLayer to PAGComposition.</span></span>
<span class="line"><span style="color:#BABED8;">pagComposition.addLayer(pagFile2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Make translate matrix</span></span>
<span class="line"><span style="color:#BABED8;">const matrix2 = PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Matrix</span><span style="color:#BABED8;">.makeTrans(100, 100)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile2.setMatrix(matrix2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile2.setStartTime(pagFile1.duration())</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Create PAGView.</span></span>
<span class="line"><span style="color:#BABED8;">const pagView = await PAG</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">PAGView</span><span style="color:#BABED8;">.init(pagComposition, </span><span style="color:#FFCB6B;">canvas</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h5 id="pag-字体注册" tabindex="-1">PAG 字体注册 <a class="header-anchor" href="#pag-字体注册" aria-label="Permalink to &quot;PAG 字体注册&quot;">​</a></h5><p>PAG 除了支持修改文本图层的文本信息外，还支持修改字体。具体方法如下：</p><p>（1）通过 PAGFont 注册字体</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fontUrl </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../assets/SourceHanSerifCN-Regular.ttf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fontBlob </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#BABED8;">(fontUrl)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">((response) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt; response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">blob</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fontFile </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">File</span><span style="color:#BABED8;">([fontBlob]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> fontUrl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">)*([^</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">]+)/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> PAG</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">PAGFont</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerFont</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SourceHanSerifCN-Regular</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> fontFile)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>（2）fontFamlily 和 fontStyle 赋值给 TextData，再进行字体修改。</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">textData</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> pagFile.getTextData(0)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#F07178;">textData.fontFamily</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SourceHanSerifCN-Regular</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">pagFile.replaceText(0, textData)</span><span style="color:#676E95;font-style:italic;">;</span></span></code></pre></div><p>如果使用了特定字体而又没有注册或字体文件中没有包含该字符，PAG 内部有一个默认字体列表（同时支持外部设置字体回退列表，外部设置时会覆盖默认设置），会回退到 PAG 的默认字体列表中，此时使用那种字体对于业务方而言是不确定的。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">class PAGFont {</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Register fallback font names from pag.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static registerFallbackFontNames(fontNames?: String[]): void;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><h5 id="pag-视频编辑场景" tabindex="-1">PAG 视频编辑场景 <a class="header-anchor" href="#pag-视频编辑场景" aria-label="Permalink to &quot;PAG 视频编辑场景&quot;">​</a></h5><p>在视频编辑场景，使用的不是 PAGView，而是 PAGPlayer、PAGSurface 和 PAGComposition。</p><p>PAGSurface 可以通过 Canvas 或纹理创建，方便快捷的与视频后编辑中的 Canvas 或 纹理进行整合。同时 PAGImage 也支持通过 Canvas 或 纹理创建，通过 PAGPlayer 控制播放进度，将视频内容填充进图片图层的占位图。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// PAGSurface interface</span></span>
<span class="line"><span style="color:#babed8;">class PAGSurface {</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Make a PAGSurface from canvas.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromCanvas(canvasID: string): PAGSurface;</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Make a PAGSurface from texture.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromTexture(textureID: number, width: number, height: number, flipY: boolean): PAGSurface;</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Make a PAGSurface from frameBuffer.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromRenderTarget(frameBufferID: number, width: number, height: number, flipY: boolean): PAGSurface;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">// PAGImage interface</span></span>
<span class="line"><span style="color:#babed8;">class PAGImage {</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Create pag image from image file.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromFile(data: File): Promise&amp;lt;PAGImage&amp;gt;;</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Create pag image from image source or video source.</span></span>
<span class="line"><span style="color:#babed8;">     * Make sure the target pixel is shown on the screen.</span></span>
<span class="line"><span style="color:#babed8;">     * Like</span></span>
<span class="line"><span style="color:#babed8;">     * \`\`\` javascript</span></span>
<span class="line"><span style="color:#babed8;">     * Image.onload = async () =&amp;gt; {</span></span>
<span class="line"><span style="color:#babed8;">     *   return await PAGImage.fromSource(Image)</span></span>
<span class="line"><span style="color:#babed8;">     * }</span></span>
<span class="line"><span style="color:#babed8;">     * \`\`\`</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromSource(source: TexImageSource): PAGImage;</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     *  Creates a PAGImage object from an array of pixel data, return null if it&#39;s not valid pixels.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromPixels(pixels: Uint8Array, width: number, height: number, colorType: ColorType, alphaType: AlphaType): PAGImage;</span></span>
<span class="line"><span style="color:#babed8;">    /**</span></span>
<span class="line"><span style="color:#babed8;">     * Creates a PAGImage object from the specified backend texture, return null if the texture is</span></span>
<span class="line"><span style="color:#babed8;">     * invalid.</span></span>
<span class="line"><span style="color:#babed8;">     */</span></span>
<span class="line"><span style="color:#babed8;">    static fromTexture(textureID: number, width: number, height: number, flipY: boolean): PAGImage;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><h5 id="pag-软解注入" tabindex="-1">PAG 软解注入 <a class="header-anchor" href="#pag-软解注入" aria-label="Permalink to &quot;PAG 软解注入&quot;">​</a></h5><p>为什么会有软解注入？PAG 的导出方式中支持 BMP 预合成导出，在 pag 文件中，如果含有 BMP 预合成，一个 BMP 预合成相当于一个视频，视频则需要解码。 在 PAG SDK 中默认使用硬件解码，但硬件解码在 Web 存在问题：</p><p>在部分移动端浏览器环境中存在“用户与页面交互之后才可以使用 Video 标签进行视频播放”的规则限制。而当业务宁愿牺牲性能也希望做到不需要用户交互而进行播放时，可以使用软件解码器 ffavc。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">lt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">script src=&quot;https://cdn.jsdelivr.net/npm/libpag@latest/lib/ffavc.min.js&quot;</span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#89DDFF;">;&amp;</span><span style="color:#BABED8;">lt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">/script</span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>通过如下方法完成软件解码器的注册：</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">// Initialize ffavc webassembly module.</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">FFAVC</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> await window.ffavc.FFAVCInit()</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#F07178;">ffavcDecoderFactory</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> new FFAVC.FFAVCDecoderFactory()</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BABED8;">PAG.registerSoftwareDecoderFactory(ffavcDecoderFactory)</span><span style="color:#676E95;font-style:italic;">;</span></span></code></pre></div><h3 id="_4、总结" tabindex="-1">4、总结 <a class="header-anchor" href="#_4、总结" aria-label="Permalink to &quot;4、总结&quot;">​</a></h3><p>PAG对于经常还原动效的前端而言，是非常实用的，其SDK 的能力很全面，覆盖的业务场景从常用的UI动效、H5动效，到当下热门的短视频模板、直播礼物等，可以说非常广泛。</p><p>这里再总结下它解决的问题：</p><p>第一，去研发成本：素材生产环节无需研发介入，节省大量研发人力和调试返工成本。研发只需要接入一次SDK的成本，后续设计师可以独立完成素材的生产上线，也避免了最耗时的研发和设计的联调环节，最终将素材生产相关的研发成本大幅降低。</p><p>第二，工业化生产：由于不再受到研发人力瓶颈的限制，素材生产可以扩大到更多的设计师进行批量化生产。再加上桌面效率工具在效果预览和性能检测上的易用性，设计师可以所见即所得地生产素材，最终让视频模板平均生产耗时从一周降低到四个小时，实现快速响应运营热点。</p><p>第三，无限AE动效：PAG的SDK已经完全还原了AE的整个动效渲染系统，并支持矢量和序列帧混合导出，接入一次，设计师就可以复用PAG经过5年积累的AE动效原子能力，组合出无限的视觉动效，不用因为代码还原成本的问题而对效果打折扣。</p><p>业务中需要解决这些问题的朋友都可以尝试使用下，最后附上 PAG 相关的资源，大家感兴趣可以进一步了解：</p><p>官网: https:/pag.art/</p>`,35)),a("p",null,[s[5]||(s[5]=n("Github：")),a("a",d,"github.com/Tencent/lib…",512)])])}const P=p(t,[["render",b]]);export{h as __pageData,P as default};

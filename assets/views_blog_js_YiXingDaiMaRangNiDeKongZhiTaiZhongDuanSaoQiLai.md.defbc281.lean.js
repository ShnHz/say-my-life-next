import{_ as a,o as n,c as l,S as p}from"./chunks/framework.7114eebe.js";const F=JSON.parse('{"title":"一行代码让你的控制台终端骚起来","description":"","frontmatter":{"title":"一行代码让你的控制台终端骚起来","date":"2024/04/11 10:25:02","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["info","js","tool"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/YiXingDaiMaRangNiDeKongZhiTaiZhongDuanSaoQiLai.md","filePath":"views/blog/js/YiXingDaiMaRangNiDeKongZhiTaiZhongDuanSaoQiLai.md"}'),o={name:"views/blog/js/YiXingDaiMaRangNiDeKongZhiTaiZhongDuanSaoQiLai.md"};function e(t,s,c,r,D,y){return n(),l("div",null,s[0]||(s[0]=[p(`<h6 id="原文-掘金" tabindex="-1">原文 <a href="https://juejin.cn/post/7355382754693464105" target="_blank" rel="noreferrer">掘金</a> <a class="header-anchor" href="#原文-掘金" aria-label="Permalink to &quot;原文 [掘金](https://juejin.cn/post/7355382754693464105)&quot;">​</a></h6><p>因为最近在开发一个前端脚手架，要使用到一个 chalk 的包，但是我可能一些版本的问题，需要做版本的降级处理，但是我也就用到一两个方法，于是便有了一些自己研究这些让控制台输出好看样式的想法。</p><h1 id="ansi" tabindex="-1">ANSI <a class="header-anchor" href="#ansi" aria-label="Permalink to &quot;ANSI&quot;">​</a></h1><p>在 Node.js 中，可以通过向控制台输出包含 ANSI 转义码的字符串来实现彩色文本。ANSI 转义码是一系列用于控制视频文本外观的代码，比如颜色、加粗等。这种方式不需要依赖任何第三方库。</p><p>ANSI 转义序列是一系列由 ASCII 字符组成的序列，用于控制终端界面中文本的格式化。这些序列以 ESC（转义）字符开头，即 ASCII 码中的第 27 个字符（用十六进制表示为 0x1B，或者八进制表示为 033）。ANSI 转义序列被用于在文本终端上实现文本颜色、光标位置、清屏等控制功能。这些功能对于创建用户友好的终端应用程序非常重要。</p><h2 id="ansi-转义序列的基本格式" tabindex="-1">ANSI 转义序列的基本格式 <a class="header-anchor" href="#ansi-转义序列的基本格式" aria-label="Permalink to &quot;ANSI 转义序列的基本格式&quot;">​</a></h2><p>ANSI 转义序列的基本格式通常是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ESC[参数m</span></span></code></pre></div><p>在上面的这些内容当中：</p><ol><li><p>ESC 是转义字符（\\033 或\\x1b）。</p></li><li><p><code>[</code> 是固定的字符，用来标识序列的开始。</p></li><li><p>参数 是一系列数字，用分号分隔，用于指定颜色、样式等。</p></li><li><p>m 是一个结束字符，用来表示序列的结束。</p></li></ol><h2 id="常用的-ansi-转义序列" tabindex="-1">常用的 ANSI 转义序列 <a class="header-anchor" href="#常用的-ansi-转义序列" aria-label="Permalink to &quot;常用的 ANSI 转义序列&quot;">​</a></h2><p>以下是一些常用的 ANSI 转义序列示例：</p><ol><li><p>重置：\\x1b[0m 将颜色重置为默认颜色。</p></li><li><p>前景色（文字颜色）：</p><ol><li>黑色：\\x1b[30m</li><li>红色：\\x1b[31m</li><li>绿色：\\x1b[32m</li><li>黄色：\\x1b[33m</li><li>蓝色：\\x1b[34m</li><li>品红：\\x1b[35m</li><li>青色：\\x1b[36m</li><li>白色：\\x1b[37m</li></ol></li><li><p>背景色：</p><ol><li>黑色：\\x1b[40m</li><li>红色：\\x1b[41m</li><li>绿色：\\x1b[42m</li><li>黄色：\\x1b[43m</li><li>蓝色：\\x1b[44m</li><li>品红：\\x1b[45m</li><li>青色：\\x1b[46m</li><li>白色：\\x1b[47m</li></ol></li></ol><p>例如，要将文本颜色设置为红色，可以使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ESC[31m你的文本ESC[0m</span></span></code></pre></div><p>这里，ESC[31m 将文本颜色设置为红色，ESC[0m 则重置文本属性，以避免红色文本影响后续的文本输出。</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[31m这是红色的文本</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16d9f8e343b44ccd919b22a0228f90d0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1556&amp;h=818&amp;s=103769&amp;e=png&amp;b=1d1d1d" alt="20240402101621" loading="lazy"></p><p>除此之外，还有一些其他的简单的示例，如下代码所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 输出红色文字</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[31m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, this is red text!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出绿色文字</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[32m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, this is green text!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出带有蓝色背景和白色文字的文本</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[44m</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[37m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, white text on a blue background!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在这些示例中，%s 是一个占位符，用于 console.log 中的字符串替换。\\x1b[0m 用于在文本输出后重置颜色，以避免影响到之后的控制台输出。</p><p>如下图所示，这是代码的最终结果输出</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6b7d2c4598d4422a7c886546dfbfa6e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1904&amp;h=1124&amp;s=198322&amp;e=png&amp;b=1d1d1d" alt="20240402102245" loading="lazy"></p><h1 id="一些比较惊艳人的效果" tabindex="-1">一些比较惊艳人的效果 <a class="header-anchor" href="#一些比较惊艳人的效果" aria-label="Permalink to &quot;一些比较惊艳人的效果&quot;">​</a></h1><p>要创建更加引人注目的控制台输出，可以混合使用不同的 ANSI 转义码，实现更丰富的文本效果，例如彩色文本、加粗、闪烁、背景色等。此外，通过定时更改输出，还可以实现简单的动画效果。</p><h2 id="文本样式" tabindex="-1">文本样式 <a class="header-anchor" href="#文本样式" aria-label="Permalink to &quot;文本样式&quot;">​</a></h2><p>要添加一些文本样式，最基本的就是加粗和下划线等等：</p><ol><li><p>加粗：\\x1b[1m</p></li><li><p>下划线：\\x1b[4m</p></li><li><p>反色：\\x1b[7m （交换前景色和背景色）</p></li></ol><h3 id="组合样式" tabindex="-1">组合样式 <a class="header-anchor" href="#组合样式" aria-label="Permalink to &quot;组合样式&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加粗的红色文字</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[1m</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[31m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is bold red text.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 下划线和青色文字</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[4m</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[36m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is underlined cyan text.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 反色显示的消息</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[7m%s</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This message has inverted colors.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的这些代码中，主要来讲解一下如下字段：</p><ol><li><p>\\x1b[1m 是启用加粗样式的 ANSI 转义序列。</p></li><li><p>\\x1b[31m 是将文本颜色设置为红色的 ANSI 转义序列。</p></li><li><p>\\x1b[4m 是启用下划线样式的 ANSI 转义序列。</p></li><li><p>\\x1b[36m 是将文本颜色设置为青色（Cyan）的 ANSI 转义序列。</p></li><li><p>\\x1b[7m 是启用反显（反色）样式的 ANSI 转义序列。反显会交换文本的前景色和背景色，创建一种“反色”效果。</p></li></ol><p>最终输出结果如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4621618c09614a5ca45901e84cf7e822~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1948&amp;h=860&amp;s=175909&amp;e=png&amp;b=1d1d1d" alt="20240402102851" loading="lazy"></p><h2 id="创建文本动画" tabindex="-1">创建文本动画 <a class="header-anchor" href="#创建文本动画" aria-label="Permalink to &quot;创建文本动画&quot;">​</a></h2><p>文本动画可以通过定期更新控制台内容来实现，例如创建一个简单的“加载”动画：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> frame </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> frames </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\\\</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">|</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> interval </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#BABED8;">(() </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  process.stdout.write(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\r</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> + frames[frame]);</span></span>
<span class="line"><span style="color:#F07178;">  frame = (frame + 1) % frames.length;</span></span>
<span class="line"><span style="color:#F07178;">}, 100);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在10秒后停止动画</span></span>
<span class="line"><span style="color:#F07178;">setTimeout(() =&amp;gt; {</span></span>
<span class="line"><span style="color:#F07178;">  clearInterval(interval);</span></span>
<span class="line"><span style="color:#F07178;">  process.stdout.write(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\r</span><span style="color:#F07178;">Done!</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">);</span></span>
<span class="line"><span style="color:#F07178;">}, 10000);</span></span></code></pre></div><p>这段 Node.js 代码实现了一个简单的命令行加载动画。它周期性地在终端显示四个字符（-、\\、|、/），模拟一个旋转的效果。动画每隔 100 毫秒更新一次，持续 10 秒钟后自动停止，并在终端打印“Done!”消息表示结束。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d3a510ae1f64590b6dbb1676ac5c37c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1708&amp;h=1076&amp;s=307560&amp;e=gif&amp;f=305&amp;b=1e1e1d" alt="2024-04-02 10.47.47.gif" loading="lazy"></p><h2 id="实时数据可视化" tabindex="-1">实时数据可视化 <a class="header-anchor" href="#实时数据可视化" aria-label="Permalink to &quot;实时数据可视化&quot;">​</a></h2><p>在项目的开发过程中，如果你使用过 webpack，那么你一定有必要来监听打包的进度，那么我们可以通过监听某个值的变化，并希望实时以柱状图的形式显示在控制台中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> drawBar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (value) </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">maxBarLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">barLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">((</span><span style="color:#BABED8;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">maxBarLength</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[32m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">█</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">barLength</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">empty</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">maxBarLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">barLength</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">bar</span><span style="color:#89DDFF;">}\${</span><span style="color:#BABED8;">empty</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">%</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> currentValue </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setInterval</span><span style="color:#BABED8;">(() </span><span style="color:#89DDFF;">=&amp;</span><span style="color:#BABED8;">gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  currentValue </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (currentValue </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">%</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">105</span><span style="color:#BABED8;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">drawBar</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">currentValue</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这段代码在终端上绘制一个进度条，其中使用绿色的 <code>█</code> 字符表示已完成部分，空格表示未完成部分，并显示当前的进度百分比，通过 ANSI 转义序列增强其绿色填充部分的视觉效果。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1799d2d1f94a46e28c6387c3371d9655~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1850&amp;h=1128&amp;s=296553&amp;e=gif&amp;f=360&amp;b=1e1e1e" alt="2024-04-02 20.32.14.gif" loading="lazy"></p>`,45)]))}const B=a(o,[["render",e]]);export{F as __pageData,B as default};

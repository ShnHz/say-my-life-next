import{_ as a,o as l,c as n,S as o}from"./chunks/framework.7114eebe.js";const D=JSON.parse('{"title":"视频抽帧及图像取色","description":"","frontmatter":{"title":"视频抽帧及图像取色","date":"2023/04/13 10:14:22","summary":"视频抽帧功能以及图像取色功能实现的思路及关键代码","config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["vue","js","tool"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/ShiPinChouZhengJiTuXiangQuSe.md","filePath":"views/blog/js/ShiPinChouZhengJiTuXiangQuSe.md"}'),p={name:"views/blog/js/ShiPinChouZhengJiTuXiangQuSe.md"};function e(t,s,c,r,y,F){return l(),n("div",null,s[0]||(s[0]=[o(`<h3 id="视频抽帧工具" tabindex="-1">视频抽帧工具 <a class="header-anchor" href="#视频抽帧工具" aria-label="Permalink to &quot;视频抽帧工具&quot;">​</a></h3><h4 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h4><ul><li>1.获取视频文件</li><li>2.加载视频文件<code class="default">video</code></li><li>3.获取<code class="default">video</code>数据，拿到宽高</li><li>4.监听视频播放位置<code class="default">addEventListener(&#39;timeupdate&#39;,fn)</code></li><li>5.根据定制化需求算出帧数数组/秒数数组，循环执行“前往视频指定位置”</li><li>6.利用<code class="default">canvas.toDataURL</code>获取<code class="default">base64图像数据</code></li><li>7.生成图片文件</li><li>8.分片压缩下载</li></ul><h4 id="关键代码" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码" aria-label="Permalink to &quot;关键代码&quot;">​</a></h4><h5 id="获取视频总帧数-帧率" tabindex="-1">获取视频总帧数/帧率 <a class="header-anchor" href="#获取视频总帧数-帧率" aria-label="Permalink to &quot;获取视频总帧数/帧率&quot;">​</a></h5><p><code class="default">MediaInfo</code>是一个能读取音频和视频文件并分析和输出音视频信息的工具，能输出的内容包括视频信息，音轨，字幕等。</p><p><code class="default">MediaInfo</code>也可以在web端使用，需要使用到<code class="default">mediainfo.js</code>。<code class="default">mediainfo.js</code> 是<code class="default">MediaInfoLib</code>通过<code class="default">WebAssembly</code>技术封装来的，也是可以支持查看音视频的信息。</p><p><a href="https://juejin.cn/post/7212444005065211961?share_token=1776334d-d47f-4967-9a29-62bea7f09453" target="_blank" rel="noreferrer">WebAssembly技术</a></p><p><a href="https://github.com/buzz/mediainfo.js" target="_blank" rel="noreferrer">mediainfo.js</a></p><h5 id="前往视频指定位置" tabindex="-1">前往视频指定位置 <a class="header-anchor" href="#前往视频指定位置" aria-label="Permalink to &quot;前往视频指定位置&quot;">​</a></h5><p><code class="default">currentTime</code> 属性设置或返回音频/视频播放的当前位置（以秒计）。如果需要前往指定帧数，则需要求出视频总帧数/帧率，以获取帧数相对秒数的位置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">video</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">currentTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> n</span></span></code></pre></div><h4 id="演示视频" tabindex="-1">演示视频 <a class="header-anchor" href="#演示视频" aria-label="Permalink to &quot;演示视频&quot;">​</a></h4><video src="https://cdn.chenyingshuang.cn/blog/js/ShiPinChouZhengJiTuXiangQuSe/spcz.mp4" controls="controls"></video><h3 id="图像取色工具" tabindex="-1">图像取色工具 <a class="header-anchor" href="#图像取色工具" aria-label="Permalink to &quot;图像取色工具&quot;">​</a></h3><h4 id="实现思路-1" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-1" aria-label="Permalink to &quot;实现思路&quot;">​</a></h4><ul><li>1.获取图片文件</li><li>2.加载图片文件<code class="default">image</code></li><li>3.获取<code class="default">image</code>数据，拿到宽高</li><li>4.将图片绘制在<code class="default">canvas</code>上</li><li>5.利用<code class="default">canvas.getImageData</code>获取图像每个像素点信息</li><li>6.求出“灰度图数据”、”alpha通道“等等信息</li><li>7.监听<code class="default">canvas</code>鼠标移动事件，同步获取当前鼠标指向像素点颜色信息</li><li>8.求出当前鼠标指向像素点周围的颜色信息，实现放大镜功能</li></ul><h4 id="关键代码-1" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-1" aria-label="Permalink to &quot;关键代码&quot;">​</a></h4><h5 id="获取图像每个像素点信息" tabindex="-1">获取图像每个像素点信息 <a class="header-anchor" href="#获取图像每个像素点信息" aria-label="Permalink to &quot;获取图像每个像素点信息&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> imgData </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getImageData</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> height)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> imgData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">r</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">imgData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">g</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">imgData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">imgData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">imgData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="如何判断灰度图" tabindex="-1">如何判断灰度图 <a class="header-anchor" href="#如何判断灰度图" aria-label="Permalink to &quot;如何判断灰度图&quot;">​</a></h5><p>当所有像素点RGB三原色相同的时候，我们把这个图像称为灰度图</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (r </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> g </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> g </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> b) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">isHasGrayscale</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="如何判断是否具有alpha通道" tabindex="-1">如何判断是否具有alpha通道 <a class="header-anchor" href="#如何判断是否具有alpha通道" aria-label="Permalink to &quot;如何判断是否具有alpha通道&quot;">​</a></h5><p>Alpha通道不是简单的指透明度，一张不透明的图片也可以携带Alpha通道。如果你只是想判断是否包含透明度，请参考：JS检测PNG图片是否有透明背景、头图等操作，想要校验Alpha，我们首先需要获取到图片的详细信息，这里我通过读取图片的二进制数据来获取详细信息。</p><p>通过阅读AlloyTeam的<a href="http://www.alloyteam.com/2017/03/the-story-of-png-get-images-and-pixel-content/" target="_blank" rel="noreferrer">png的故事</a>，对图片二进制数据有一些了解，得出一下结论：</p><ul><li><p>[0, 8]位表示的是png图片的类型，可以通过这个判断图片类型，值为：[137, 80, 78, 71, 13, 10, 26, 10]；</p></li><li><p>[8, 12]位表示数据内容长度；</p></li><li><p>[12, 16]位表示数据块类型；</p></li></ul><p>当[12, 16]的数据转成字节码为 IHDR 时，表示图片带有宽度、高度和深度数据：</p><ul><li><p>[16, 20]16~19位表示图片的宽度</p></li><li><p>[20~24]位表示图片的高度</p></li><li><p>[25]位表示图片的深度</p></li></ul><p>[25]就是我们所需要的数据，它有5种值：</p><ul><li><p>1：灰度图像，1、2、4、8、16</p></li><li><p>2：真彩色图像，8、16</p></li><li><p>3：索引彩色图像，1、2、4、8</p></li><li><p>4：带有a通道数据的灰度图像，8、16</p></li><li><p>6：带有a通道数据的真彩色图像，8、16</p></li></ul><p>实现步骤</p><ul><li>读取图片缓冲区数据</li><li>把缓存区数据转成二进制数据</li><li>判断数据块类型</li><li>根据[25]数值判断是否包含Alpha通道</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> readBuffer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">file</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">reader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FileReader</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">reject</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsArrayBuffer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isHasAlpha </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">file</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 读取图片缓存区数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">buffers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">readBuffer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 缓存区数据转成二进制数据，并获取0~25位数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">uint8Array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">buffers</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">26</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取类型</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#BABED8;">uint8Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">number</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromCharCode</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">number</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 判断类型和[25]的数值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">IHDR</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">uint8Array</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">25</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">uint8Array</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">25</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">uint8Array</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">25</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="演示视频-1" tabindex="-1">演示视频 <a class="header-anchor" href="#演示视频-1" aria-label="Permalink to &quot;演示视频&quot;">​</a></h4><video src="https://cdn.chenyingshuang.cn/blog/js/ShiPinChouZhengJiTuXiangQuSe/txqs.mp4" controls="controls"></video>`,36)]))}const B=a(p,[["render",e]]);export{D as __pageData,B as default};

import{_ as t,o as a,c as l,S as d}from"./chunks/framework.7114eebe.js";const p=JSON.parse('{"title":"HTML","description":"","frontmatter":{"title":"HTML","config":{"dir":true},"password":true},"headers":[],"relativePath":"views/interview/Html.md","filePath":"views/interview/Html.md"}'),c={name:"views/interview/Html.md"};function i(o,e,r,s,n,h){return a(),l("div",null,e[0]||(e[0]=[d('<h4 id="_1-说一说重绘和重排的区别-如何避免" tabindex="-1">1.说一说重绘和重排的区别？如何避免？ <a class="header-anchor" href="#_1-说一说重绘和重排的区别-如何避免" aria-label="Permalink to &quot;1.说一说重绘和重排的区别？如何避免？&quot;">​</a></h4><p>重排（回流）：当元素的大小、位置发送变化的时候，浏览器就要重新计算该元素的几何属性并且重新把它放到相应位置上，这个过程叫做重排。</p><p>重绘：当元素的样式、外观发送变化而布局不发生改变，这种情况会触发重绘，重绘不一定重排，重排一定重绘。</p><p><b>重排要比重绘的成本大得多，我们应该尽量减少重排操作，减少页面性能消耗。</b></p><p>如何优化？</p><ul><li>利用class集中改变样式，减少重排/重绘次数</li><li>离线DOM，当对DOM节点有较大改动的时候，我们先将元素<b>脱离文档流</b>，然后对元素进行操作，最后再把操作后的元素放回文档流</li><li>善用内存：在内存中多次操作DOM，再整个添加到DOM树</li></ul><h4 id="_2-对html语义化的理解。" tabindex="-1">2.对HTML语义化的理解。 <a class="header-anchor" href="#_2-对html语义化的理解。" aria-label="Permalink to &quot;2.对HTML语义化的理解。&quot;">​</a></h4><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗来讲就是用正确的标签做正确的事情。 语义化的优点如下：</p><ul><li>对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；</li><li>对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。</li></ul><table><thead><tr><th style="text-align:center;">标签</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">header</td><td style="text-align:center;">头部</td></tr><tr><td style="text-align:center;">nav</td><td style="text-align:center;">导航栏</td></tr><tr><td style="text-align:center;">section</td><td style="text-align:center;">区块（有语义化的div）</td></tr><tr><td style="text-align:center;">hgroup</td><td style="text-align:center;">“网页”或“section”的标题</td></tr><tr><td style="text-align:center;">main</td><td style="text-align:center;">主要区域</td></tr><tr><td style="text-align:center;">article</td><td style="text-align:center;">主要内容</td></tr><tr><td style="text-align:center;">aside</td><td style="text-align:center;">侧边栏</td></tr><tr><td style="text-align:center;">footer</td><td style="text-align:center;">底部</td></tr><tr><td style="text-align:center;">figure</td><td style="text-align:center;">规定独立的流内容（图像、图表、照片、代码等等）</td></tr><tr><td style="text-align:center;">time</td><td style="text-align:center;">定义时间或日期</td></tr><tr><td style="text-align:center;">address</td><td style="text-align:center;">地址</td></tr></tbody></table><h4 id="_3-src和href的区别。" tabindex="-1">3.src和href的区别。 <a class="header-anchor" href="#_3-src和href的区别。" aria-label="Permalink to &quot;3.src和href的区别。&quot;">​</a></h4><p><code>src</code>和<code>href</code>都是用<strong>引用外部的资源</strong>，它们的区别如下：</p><ul><li><strong>src</strong>： 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。</li><li><strong>href</strong>： 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li></ul><h4 id="_4-行内元素有哪些-块级元素有哪些-空-void-元素有哪些" tabindex="-1">4.行内元素有哪些？块级元素有哪些？空(void)元素有哪些？ <a class="header-anchor" href="#_4-行内元素有哪些-块级元素有哪些-空-void-元素有哪些" aria-label="Permalink to &quot;4.行内元素有哪些？块级元素有哪些？空(void)元素有哪些？&quot;">​</a></h4><ul><li>行内元素有：<code>a</code> <code>b</code> <code>span</code> <code>img</code> <code>input</code> <code>select</code> <code>strong</code>；</li><li>块级元素有：<code>div</code> <code>ul</code> <code>ol</code> <code>li</code> <code>dl</code> <code>dt</code> <code>dd</code> <code>h1</code> <code>h2</code> <code>h3</code> <code>h4</code> <code>h5</code> <code>h6</code> <code>p</code>；</li></ul><p>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p><ul><li>常见的有：<code>br</code>、<code>hr</code>、<code>img</code>、<code>input</code>、<code>link</code>、<code>meta</code>；</li><li>鲜见的有：<code>area</code>、<code>base</code>、<code>col</code>、<code>colgroup</code>、<code>command</code>、<code>embed</code>、<code>keygen</code>、<code>param</code>、<code>source</code>、<code>track</code>、<code>wbr</code>。</li></ul><h4 id="_5-iframe-有那些优点和缺点" tabindex="-1">5.iframe 有那些优点和缺点？ <a class="header-anchor" href="#_5-iframe-有那些优点和缺点" aria-label="Permalink to &quot;5.iframe 有那些优点和缺点？&quot;">​</a></h4><p><code>iframe</code> 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><p>优点：</p><ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul><p>缺点：</p><ul><li><code>iframe</code> 会阻塞主页面的 <code>onload</code> 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li></ul><h4 id="_6-defer-和-async-的区别" tabindex="-1">6.defer 和 async 的区别？ <a class="header-anchor" href="#_6-defer-和-async-的区别" aria-label="Permalink to &quot;6.defer 和 async 的区别？&quot;">​</a></h4><ul><li><code>async</code> 是在下载完成之后，立即异步加载，加载好后立即执行，多个带<code>async</code>属性的标签，不能保证加载的顺序；</li><li><code>defer</code> 是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM 树解析好再执行；如果DOM树已经准备好，则立即执行。多个带defer属性的标签，按照顺序执行。</li></ul><h4 id="_7-了解canvas吗" tabindex="-1">7.了解canvas吗 <a class="header-anchor" href="#_7-了解canvas吗" aria-label="Permalink to &quot;7.了解canvas吗&quot;">​</a></h4><p>HTML5 <code class="default">canvas</code> 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成。</p><p><code class="default">canvas</code> 标签只是图形容器，必须使用脚本来绘制图形。</p><p>可以通过多种方法使用 <code class="default">canvas</code> 绘制路径,盒、圆、字符以及添加图像。</p><h4 id="_8-svg与canvas的区别与优缺点对比" tabindex="-1">8.SVG与Canvas的区别与优缺点对比 <a class="header-anchor" href="#_8-svg与canvas的区别与优缺点对比" aria-label="Permalink to &quot;8.SVG与Canvas的区别与优缺点对比&quot;">​</a></h4><h6 id="canvas" tabindex="-1">Canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;Canvas&quot;">​</a></h6><ul><li><code class="default">Canvas</code> 是一个非常简单易用的图形系统，可以通过一组简单的绘图指令，方便快捷地绘制出复杂的几何图形。</li><li><code class="default">Canvas</code> 渲染起来相当高效，Canvas 更偏向于渲染层，能够提供底层的图形渲染 API 。在实际实现可视化业务的时候，出色的渲染能力正是它的优势所在。</li><li>因 <code class="default">Canvas</code> 在 HTML 层面上是一个独立的画布元素，所以所有的绘制内容都是在内部通过绘图指令来完成的，绘制出的图形对于浏览器来说，只是 <code class="default">Canvas</code> 中的一个个像素点，我们很难直接抽取其中的图形对象进行操作。</li></ul><h6 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG&quot;">​</a></h6><p><code class="default">SVG</code> 的全称是 Scalable Vector Graphics，可缩放矢量图，它是浏览器支持的一种基于 XML 语法的图像格式。既可以作为 HTML 内嵌元素使用，也可以作为图像通过 img 元素加载，或者绘制到 Canvas 内。</p><h6 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h6><ul><li>svg画的是矢量图，canvas画的是位图</li><li>svg节点过多，渲染比较慢，canvas可以利用gpu性能更好</li><li>svg可以交互，canvas交互比较困难，因为它本质上其实是一个个像素点</li></ul><h4 id="_9-webgl-矩阵算法" tabindex="-1">9.webGL 矩阵算法 <a class="header-anchor" href="#_9-webgl-矩阵算法" aria-label="Permalink to &quot;9.webGL 矩阵算法&quot;">​</a></h4><p>需要实现的效果不一样，矩阵算法也是不一样的</p><img src="https://cdn.chenyingshuang.cn/interview/html/1.JPG"><h4 id="_10-矩阵算法为什么不用3x3而用4x4" tabindex="-1">10.矩阵算法为什么不用3X3而用4X4 <a class="header-anchor" href="#_10-矩阵算法为什么不用3x3而用4x4" aria-label="Permalink to &quot;10.矩阵算法为什么不用3X3而用4X4&quot;">​</a></h4><p>因为平移这个运动是无法用3X3来完成的，需要引入一个常量（齐次坐标）来实现完美的平移矩阵，这个是数学公式推导出来的</p><h4 id="_11-use-strict是什么意思-使用它区别是什么" tabindex="-1">11.use strict是什么意思 ? 使用它区别是什么？ <a class="header-anchor" href="#_11-use-strict是什么意思-使用它区别是什么" aria-label="Permalink to &quot;11.use strict是什么意思 ? 使用它区别是什么？&quot;">​</a></h4><p>执行严格模式</p><ul><li>消除Js语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>提高编译器效率</li><li>为未来的新版本的js做铺垫</li></ul><p>严格模式主要有以下限制：</p><ul><li>1.变量必须先声明后使用</li><li>2.函数的参数不能有同名属性</li><li>3.不能使用with语句</li><li>4.不能对只读属性赋值</li><li>5.不能删除不可删除的属性</li><li>6.eval和arguments不能被重新赋值</li><li>7.arguments不会自动反映函数参数的变化</li><li>8.禁止this指向全局对象</li></ul><h4 id="_12-canvas性能优化" tabindex="-1">12.canvas性能优化 <a class="header-anchor" href="#_12-canvas性能优化" aria-label="Permalink to &quot;12.canvas性能优化&quot;">​</a></h4><p>canvas的性能影响是由<strong>绘制图形的个数</strong>以及<strong>绘制图形的大小</strong>来决定的</p><ul><li>减少绘图指令，循环绘制，变成单次绘制</li><li>分层绘制，将静态的一些图形单独提出到别的图层内，减少绘制次数</li><li>局部渲染，找到想要改变的图形位置，去clip，重新绘制该位置的图形</li></ul>',49)]))}const g=t(c,[["render",i]]);export{p as __pageData,g as default};

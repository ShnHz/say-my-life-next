import{_ as a,o as l,c as n,S as o}from"./chunks/framework.7114eebe.js";const F=JSON.parse('{"title":"JS类型是如何相互转换的","description":"","frontmatter":{"title":"JS类型是如何相互转换的","date":"2022/12/07 19:44:45","summary":null,"config":{"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/JSLeiXingShiRuHeXiangHuZhuanHuanDe.md","filePath":"views/blog/js/JSLeiXingShiRuHeXiangHuZhuanHuanDe.md"}'),p={name:"views/blog/js/JSLeiXingShiRuHeXiangHuZhuanHuanDe.md"};function e(t,s,c,r,y,D){return l(),n("div",null,s[0]||(s[0]=[o(`<p>类型转换的过程分别有三步</p><ul><li>1.类型转换规则</li><li>2.运算规则</li><li>3.表达式</li></ul><h3 id="类型转换规则" tabindex="-1">类型转换规则 <a class="header-anchor" href="#类型转换规则" aria-label="Permalink to &quot;类型转换规则&quot;">​</a></h3><h4 id="原始-数字" tabindex="-1">原始-&gt;数字 <a class="header-anchor" href="#原始-数字" aria-label="Permalink to &quot;原始-&gt;数字&quot;">​</a></h4><p><code class="default">true =&gt; 1</code></p><p><code class="default">false =&gt; 0</code></p><p><code class="default">null =&gt; 0</code></p><p><code class="default">undefined =&gt; NaN</code></p><p><code class="default">string:空字符串(空白字符) =&gt; 0</code></p><p><code class="default">string:包含非空白字符 =&gt; 去掉引号，不是数字就是NaN =&gt; 0</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//123</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">  123 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//123</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//NaN</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12 3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//NaN</span></span></code></pre></div><h4 id="所有-布尔" tabindex="-1">所有-&gt;布尔 <a class="header-anchor" href="#所有-布尔" aria-label="Permalink to &quot;所有-&gt;布尔&quot;">​</a></h4><p><code class="default">null =&gt; false</code></p><p><code class="default">undefined =&gt; false</code></p><p><code class="default">number:0 =&gt; false</code></p><p><code class="default">number:NaN =&gt; false</code></p><p><code class="default">number:其他 =&gt; true</code></p><p><code class="default">string:空字符串 =&gt; false</code></p><p><code class="default">string:其他 =&gt; true</code></p><p><code class="default">对象 =&gt; true</code></p><h4 id="原始-字符串" tabindex="-1">原始-&gt;字符串 <a class="header-anchor" href="#原始-字符串" aria-label="Permalink to &quot;原始-&gt;字符串&quot;">​</a></h4><p><code class="default">null =&gt; &quot;null&quot;</code></p><p><code class="default">undefined =&gt; &quot;undefined&quot;</code></p><p><code class="default">number =&gt; &quot;数字&quot;</code></p><p><code class="default">boolean =&gt; &quot;true/false&quot;</code></p><p>对象-&gt;字符串？先转为原始类型再转为字符串</p><h4 id="对象-原始" tabindex="-1">对象-&gt;原始 <a class="header-anchor" href="#对象-原始" aria-label="Permalink to &quot;对象-&gt;原始&quot;">​</a></h4><ul><li>1.调用<code class="default">valueOf</code></li><li>2.返回值如果是对象，重新调用<code class="default">toString</code></li><li>3.返回值如果依旧是对象，则报错</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(obj)) </span><span style="color:#676E95;font-style:italic;">//NaN</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 来看一下过程</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">//fn()，依旧是对象，重新调用toString</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">//[object Object]，为字符串，所以不会报错</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">//NaN</span></span></code></pre></div><h3 id="运算规则" tabindex="-1">运算规则 <a class="header-anchor" href="#运算规则" aria-label="Permalink to &quot;运算规则&quot;">​</a></h3><h4 id="算数运算" tabindex="-1">算数运算 <a class="header-anchor" href="#算数运算" aria-label="Permalink to &quot;算数运算&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">运算符号</p><p>+ - * / % ++ --</p></div><p>第一步：转换为原始类型</p><p>第二步：三种情况</p><ul><li>非特殊情况：转换为<strong>数字</strong>，然后运算</li><li>特殊情况：如果两边变量有一个是字符串，则转换为<strong>字符串</strong>，然后拼接</li><li>特殊情况：<strong>NaN</strong>和任何类型运算得到的还是<code class="default">NaN</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null+undefined</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//NaN</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// null -&gt; 数字 = 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// undefined -&gt; 数字 = NaN</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0 + NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">([]</span><span style="color:#89DDFF;">+{}</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">//[object Object]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [] -&gt; 原始类型 -&gt; &#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {} -&gt; 原始类型 -&gt; //[object Object]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;&#39; + [object Object]</span></span></code></pre></div><h4 id="比较运算" tabindex="-1">比较运算 <a class="header-anchor" href="#比较运算" aria-label="Permalink to &quot;比较运算&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">运算符号</p><p>&gt; &lt; &gt;= &lt;= == != === !==</p></div><blockquote><p>&gt; &lt; &gt;= &lt;=</p></blockquote><p>第一步：转换为原始类型</p><p>第二步：三种情况</p><ul><li>非特殊情况：转换为<strong>数字</strong>，然后运算</li><li>特殊情况：两边全是<strong>字符串</strong>，比较字典顺序</li><li>特殊情况：两边存在<strong>NaN</strong>，一定为<code class="default">false</code></li></ul><blockquote><p>==</p></blockquote><ul><li>两端类型相同，比较值</li><li>两端都是<strong>原始类型</strong>，转换为<strong>数字</strong>比较</li><li>一端为<strong>原始类型</strong>,一端是<strong>对象类型</strong>,把<strong>对象</strong>转换为<strong>原始类型</strong>后比较</li><li>特殊情况：<code class="default">undefined</code>和<code class="default">null</code>只有与自身比较,或者相互比较时才会返回<code class="default">true</code></li><li>特殊情况：两边存在<strong>NaN</strong>，一定为<code class="default">false</code></li></ul><blockquote><p>===</p></blockquote><ul><li>类型和值必须相等</li><li>特殊情况:两边存在<strong>NaN</strong>，一定为<code class="default">false</code></li></ul><blockquote><p>!= !==</p></blockquote><ul><li>对相等值取反</li></ul><h4 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">运算符号</p><p>&gt; || &amp;&amp; ?:</p></div><p>x &amp;&amp; y</p><ul><li>1.x为fakse,返回x</li><li>2.x为true,返回y</li></ul><p>x || y</p><ul><li>1.x为true,返回x</li><li>2.x为false,返回y</li></ul><h3 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h3><p>运算符与数据的结合成为表达式,表达式会有返回值,表达运算结果</p><p>表达式可以出现在任何数据能够书写的地方</p><h3 id="练习题" tabindex="-1">练习题 <a class="header-anchor" href="#练习题" aria-label="Permalink to &quot;练习题&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#BABED8;">\\t\\r\\n</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">b</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj1 </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">!!</span><span style="color:#BABED8;">obj2)</span></span></code></pre></div>`,59)]))}const u=a(p,[["render",e]]);export{F as __pageData,u as default};

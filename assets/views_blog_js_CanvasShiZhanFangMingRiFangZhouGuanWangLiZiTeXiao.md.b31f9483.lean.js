import{_ as s,H as o,o as t,c as l,J as n,S as d}from"./chunks/framework.7114eebe.js";const v=JSON.parse('{"title":"Canvas实战-仿明日方舟官网粒子特效","description":"","frontmatter":{"title":"Canvas实战-仿明日方舟官网粒子特效","date":"2023/03/14 13:03:03","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["css","js"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/js/CanvasShiZhanFangMingRiFangZhouGuanWangLiZiTeXiao.md","filePath":"views/blog/js/CanvasShiZhanFangMingRiFangZhouGuanWangLiZiTeXiao.md"}'),c={name:"views/blog/js/CanvasShiZhanFangMingRiFangZhouGuanWangLiZiTeXiao.md"};function r(i,a,u,h,p,g){const e=o("blog-js-CanvasRhodesIsland");return t(),l("div",null,[n(e),a[0]||(a[0]=d('<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>先来看看官网的效果 <a href="https://ak.hypergryph.com/#world" target="_blank" rel="noreferrer">传送门</a></p><p>很明显使用了 <code class="default">canvas2d</code> 中的 <strong>像素操作</strong></p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>首先分析这个动画效果是如何实现的，我们可以简单分为三个步骤：</p><ul><li>01.解析图片转换为粒子</li><li>02.绘制时添加动画</li><li>03.根据鼠标位置对粒子进行排斥</li></ul><p>解析图片通过<code class="default">Canvas</code>的<code class="default">getImageData</code>获取像素数据实现。</p><p>较难点在于 <strong>绘制动画</strong> 和 <strong>粒子排斥</strong>，涉及到 <code class="default">数学应用 和 动画/交互逻辑</code>。</p><p>我们这边简单说一下 <strong>粒子排斥</strong> 的一个数学算法（也可能是最难的一部分），其余具体的实现可以看 <a href="https://juejin.cn/post/7160491044222533639" target="_blank" rel="noreferrer">原文</a></p><h4 id="粒子排斥" tabindex="-1">粒子排斥 <a class="header-anchor" href="#粒子排斥" aria-label="Permalink to &quot;粒子排斥&quot;">​</a></h4><p>明显观察到画布会<strong>以鼠标为中心对粒子进行一定范围的排斥</strong>，越接近中心排斥的速度越快。</p><p>我们可以向<code class="default">particle</code>对象的<code class="default">update</code>方法中传入鼠标在<code class="default">canvas</code>画布中的位置<code class="default">mouseX, mouseY</code>。</p><p>并结合粒子当前位置<code class="default">(x, y)</code> 和 排斥力度<code class="default">Inten</code> 重新计算移动速度<code class="default">vx、vy</code>。由此使粒子不断远离中心。</p><h5 id="设计方案" tabindex="-1">设计方案 <a class="header-anchor" href="#设计方案" aria-label="Permalink to &quot;设计方案&quot;">​</a></h5><ul><li>01.设置固定值 <code class="default">Radius</code>(斥力影响范围)、<code class="default">Inten</code>(斥力标准值)。</li><li>02.设置鼠标位置 <code class="default">(mouseX, mouseY)</code> 为斥力中心。</li><li>03.计算每个粒子与中心的 直线距离<code class="default">distance</code>。</li><li>04.通过 <code class="default">Radius / distance</code> 获得 中心影响范围 与 直线距离 的比例<code class="default">disPercent</code>。<strong>比例越大越接近中心，受到的斥力也越大</strong></li><li>05.将粒子与中心形成的 <code class="default">夹角angle</code>、<code class="default">比例disPercent</code>和<code class="default">斥力值Inten</code>，转换为粒子x、y轴的速度<code class="default">repX、repY</code>。</li><li>06.<code class="default">vx += repX &amp; vy += repY</code>，粒子逐渐远离中心。</li></ul><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><h6 id="canvas实战】仿明日方舟logo粒子动画-vue3-ts" tabindex="-1"><a href="https://juejin.cn/post/7160491044222533639" target="_blank" rel="noreferrer">Canvas实战】仿明日方舟Logo粒子动画 vue3+ts</a> <a class="header-anchor" href="#canvas实战】仿明日方舟logo粒子动画-vue3-ts" aria-label="Permalink to &quot;[Canvas实战】仿明日方舟Logo粒子动画 vue3+ts](https://juejin.cn/post/7160491044222533639)&quot;">​</a></h6>',17))])}const m=s(c,[["render",r]]);export{v as __pageData,m as default};

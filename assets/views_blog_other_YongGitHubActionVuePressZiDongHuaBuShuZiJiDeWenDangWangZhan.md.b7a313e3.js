import{_ as o,o as e,c as p,C as n,a,S as l}from"./chunks/framework.7114eebe.js";const v=JSON.parse('{"title":"用GitHub Action + VuePress自动化部署自己的文档网站","description":"","frontmatter":{"title":"用GitHub Action + VuePress自动化部署自己的文档网站","date":"2023/05/15 22:13:53","summary":null,"config":{"show":true,"top":false,"dir":true,"dirTag":["h3","h4","h5"],"tag":["info","tool","git"],"valine":true,"valineId":null},"password":false,"outline":[3,5]},"headers":[],"relativePath":"views/blog/other/YongGitHubActionVuePressZiDongHuaBuShuZiJiDeWenDangWangZhan.md","filePath":"views/blog/other/YongGitHubActionVuePressZiDongHuaBuShuZiJiDeWenDangWangZhan.md"}'),t={name:"views/blog/other/YongGitHubActionVuePressZiDongHuaBuShuZiJiDeWenDangWangZhan.md"},r={class:"markdown-body cache"},c={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprocess1024%2Farticle",target:"_blank",title:"https://github.com/process1024/article",ref:"nofollow noopener noreferrer"},i={href:"https://link.juejin.cn?target=https%3A%2F%2Fprocess1024.github.io%2Farticle%2F",target:"_blank",title:"https://process1024.github.io/article/",ref:"nofollow noopener noreferrer"},y={href:"https://link.juejin.cn?target=https%3A%2F%2Fjunyi-chen.gitee.io%2Farticle%2F",target:"_blank",title:"https://junyi-chen.gitee.io/article/",ref:"nofollow noopener noreferrer"},D={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmarketplace%3Ftype%3Dactions",target:"_blank",title:"https://github.com/marketplace?type=actions",ref:"nofollow noopener noreferrer"},u={href:"https://link.juejin.cn?target=github.com%2Factions",target:"_blank",title:"github.com/actions",ref:"nofollow noopener noreferrer"},F={href:"https://link.juejin.cn?target=https%3A%2F%2Fusername.github.io%2F%25E3%2580%2582",target:"_blank",title:"https://username.github.io/%E3%80%82",ref:"nofollow noopener noreferrer"},h={href:"https://link.juejin.cn?target=https%3A%2F%2Fusername.github.io%2Frepo%2F",target:"_blank",title:"https://username.github.io/repo/",ref:"nofollow noopener noreferrer"},d={href:"https://link.juejin.cn?target=https%3A%2F%2Fusername.github.io%2Frepo",target:"_blank",title:"https://username.github.io/repo",ref:"nofollow noopener noreferrer"},B={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprocess1024%2Farticle",target:"_blank",title:"https://github.com/process1024/article",ref:"nofollow noopener noreferrer"},b={href:"https://link.juejin.cn?target=https%3A%2F%2Fprocess1024.github.io%2Farticle%2F",target:"_blank",title:"https://process1024.github.io/article/",ref:"nofollow noopener noreferrer"},g={href:"https://link.juejin.cn?target=https%3A%2F%2Fjunyi-chen.gitee.io%2Farticle%2F",target:"_blank",title:"https://junyi-chen.gitee.io/article/",ref:"nofollow noopener noreferrer"};function E(f,s,A,m,k,C){return e(),p("div",null,[s[23]||(s[23]=n("h6",{id:"原文-掘金",tabindex:"-1"},[a("原文 "),n("a",{href:"https://juejin.cn/post/6937532951223599141",target:"_blank",rel:"noreferrer"},"掘金"),a(),n("a",{class:"header-anchor",href:"#原文-掘金","aria-label":'Permalink to "原文 [掘金](https://juejin.cn/post/6937532951223599141)"'},"​")],-1)),n("div",r,[s[15]||(s[15]=n("h2",{id:"前言",tabindex:"-1"},[a("前言 "),n("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1)),n("p",null,[s[0]||(s[0]=a("本文教你如何使用GitHub Action + vuepress自动化部署在GitHub Pages。最终的代码在我的")),n("a",c,"GitHub",512),s[1]||(s[1]=a("可以看，演示可以点")),n("a",i,"这里",512),s[2]||(s[2]=a("，演示访问不了的可以访问我的")),n("a",y,"gitee pages地址",512),s[3]||(s[3]=a("，我在gitee也有同步代码部署gitee pages。"))]),s[16]||(s[16]=l(`<h2 id="vuepress" tabindex="-1">VuePress <a class="header-anchor" href="#vuepress" aria-label="Permalink to &quot;VuePress&quot;">​</a></h2><p>VuePress 是一个以 Markdown 为中心的静态网站生成器。在本文的示例里使用的是vue3版本的vuepress-next。VuePress还能在Markdown里使用Vue语法，并且每个页面都会预渲染生成静态的HTML，也就是说加载性能好还有非常好的SEO支持，非常适合用来写文档和博客。</p><h3 id="项目搭建" tabindex="-1">项目搭建 <a class="header-anchor" href="#项目搭建" aria-label="Permalink to &quot;项目搭建&quot;">​</a></h3><h4 id="_1-创建项目" tabindex="-1">1.创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1.创建项目&quot;">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 创建并进入一个目录</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vuepress-starter</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vuepress-starter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 初始化项目</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将 VuePress 安装为本地依赖</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vuepress@next</span></span></code></pre></div><h4 id="_2-添加script命令" tabindex="-1">2.添加script命令 <a class="header-anchor" href="#_2-添加script命令" aria-label="Permalink to &quot;2.添加script命令&quot;">​</a></h4><div class="language-package.json"><button title="Copy Code" class="copy"></button><span class="lang">package.json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">    &quot;docs:dev&quot;: &quot;vuepress dev docs&quot;,</span></span>
<span class="line"><span style="color:#babed8;">    &quot;docs:build&quot;: &quot;vuepress build docs&quot;</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><h4 id="_3-创建第一篇文章" tabindex="-1">3.创建第一篇文章 <a class="header-anchor" href="#_3-创建第一篇文章" aria-label="Permalink to &quot;3.创建第一篇文章&quot;">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">docs</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"># Hello VuePress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">docs/README.md</span></span></code></pre></div><h4 id="_4-本地启动" tabindex="-1">4.本地启动 <a class="header-anchor" href="#_4-本地启动" aria-label="Permalink to &quot;4.本地启动&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn docs:dev</span></span></code></pre></div><p>然后就可以打开localhost:8080看到Hello Vuepress的文章了，并且是支持热更新，因为vuepress就是用webpack-dev-server驱动的。VuePress还有很多扩展的配置，在docs目录下加新建.vuepress/config.js，在这里可以配置标题、主题、语言、导航栏等等，在这里不展开描述。</p><p>最后部署的时候用yarn docs:build命令，会在docs/.vuepress生成dist目录，这个目录后面配置workflow会用到。</p><h2 id="github-actions" tabindex="-1">GitHub-Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;GitHub-Actions&quot;">​</a></h2><p>actions顾名思义就是一堆动作，是一个持续集成服务，持续集成包含了拉代码、运行测试、编译代码、登录远程服务器，发布到第三方服务等等的操作，GitHub将这些操作称为actions。</p><p>不同项目的很多操作可以是一样的，比如拉取分支代码、缓存依赖等，每个也就是一个action脚本是可以共用的，所以GitHub允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>`,16)),n("p",null,[s[4]||(s[4]=a("GitHub做了一个")),n("a",D,"官方市场",512),s[5]||(s[5]=a("，可以让开发者提交action供其他人使用，GitHub 官方的 actions 则都放在 ")),n("a",u,"github.com/actions",512),s[6]||(s[6]=a(" 里面。接下来介绍写一个VuePress的action。"))]),s[17]||(s[17]=n("h3",{id:"建立仓库",tabindex:"-1"},[a("建立仓库 "),n("a",{class:"header-anchor",href:"#建立仓库","aria-label":'Permalink to "建立仓库"'},"​")],-1)),n("p",null,[s[7]||(s[7]=a("首先在github上创建仓库，如果建立的仓库名称是username.github.io，则最后访问的地址")),n("a",F,"username.github.io/。",512),s[8]||(s[8]=a(" 如果不是这个名称，则最后访问的地址是")),n("a",h,"username.github.io/repo/",512),s[9]||(s[9]=a(" ,repo就是仓库名字，此时还需要先修改.vuepress/config.js，该文件导出一个对象，增加base的配置项，值为“/repo/”。"))]),s[18]||(s[18]=l(`<h3 id="添加-github相关配置文件" tabindex="-1">添加.github相关配置文件 <a class="header-anchor" href="#添加-github相关配置文件" aria-label="Permalink to &quot;添加.github相关配置文件&quot;">​</a></h3><p>在项目的根目录下新建.github/workflows目录，workflow就是GitHub Actions 的配置文件。随便新建.yml文件就是一个flow，github会自动运行workflows目录下所有的yml文件。介绍下workflow最重要的几个配置和概念。</p><ol><li>name</li></ol><p>name字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名</p><ol start="2"><li>on</li></ol><p>on字段指定触发 workflow 的条件，通常是某些事件。在本文实例里用的是push，指的就是当git push事件发生时触发该workflow。</p><ol start="3"><li>jobs</li></ol><p>jobs是workflow最重要的部分，表示workflow要执行的任务，可以是一个或者多个。</p><p>接下里开始就是本文示例的部署内容。</p><p>我们希望的流程是，本地改完代码，上传到github后能自动打包部署到gh-pages分支。先配置触发条件on：</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FF9CAC;">on</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 触发条件</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 每当 push 到 master 分支时触发部署</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">branches</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 是否手动触发部署</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">workflow_dispatch</span><span style="color:#89DDFF;">:</span></span></code></pre></div><p>接下来配置重头戏jobs:</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">jobs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">docs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">runs-on</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ubuntu-latest</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 指定运行所需要的虚拟机环境（必填）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">steps</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">actions/checkout@v2</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">fetch-depth</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Setup Node.js</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">actions/setup-node@v1</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 选择要使用的 node 版本</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">node-version</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">14</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 缓存 node_modules</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache dependencies</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">actions/cache@v2</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">yarn-cache</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">|</span></span>
<span class="line"><span style="color:#C3E88D;">            **/node_modules</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">\${{ runner.os }}-yarn-\${{ hashFiles(&#39;**/yarn.lock&#39;) }}</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">restore-keys</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">|</span></span>
<span class="line"><span style="color:#C3E88D;">            \${{ runner.os }}-yarn-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 如果缓存没有命中，安装依赖</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Install dependencies</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">if</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">steps.yarn-cache.outputs.cache-hit != &#39;true&#39;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">yarn --frozen-lockfile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 运行构建脚本</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Build VuePress site</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">yarn docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 查看 workflow 的文档来获取更多信息</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># @see https://github.com/crazy-max/ghaction-github-pages</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">crazy-max/ghaction-github-pages@v2</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 环境变量</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">GITHUB_TOKEN</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">\${{ secrets.ACTION_SECRET }}</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 部署到 gh-pages 分支</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">target_branch</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">gh-pages</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 部署目录为 VuePress 的默认输出目录</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">build_dir</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">docs/.vuepress/dist</span></span></code></pre></div><p>首先job里配置运行这个脚本需要的虚拟机环境，这个虚拟机环境由github提供，可用的包括windows、linux、macos等环境，具体看官方文档。在此示例中其实不论哪个系统都是可以的，因为我们需要的是node环境，而node本身就是跨平台的。</p><p>接下里设置获取源码、需要的node版本、增加缓存依赖，这里使用官方提供的actions/setup-node@v1、setup-node@v1、cache@v2。这里的@表示版本，使用别人的action时最好都加上版本，以防后面更新的action不兼容当前的脚本。这些前置条件配置好，接下来就是熟悉的yarn install、yarn build:docs，安装依赖使用--frozen-lockfile来锁定版本。最后一步就是将打包的目录更新到gh-pages分支。因为要更新github代码，所以还需要配置github-token。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61815fbd6adc4b10b5d60da9b49ab8b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="" loading="lazy"></p><p>在仓库的setting下找到secert，新建一个secert，文件名可以随便取，在workflow的环境变量里secerts指的就是这里secert，后面就是secert里文件的具体名称，在这里取为ACTION_SECERT，env配置secerts.ACTION_SECRET就行。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74607c18da504d63a88894d9493d6dce~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="" loading="lazy"></p><p>最后指定部署的分支名称，和部署到分支的默认输出目录就行。</p><p>尝试着推送代码，可以看到仓库的Actions开始自动运行了，并且能看到运行的日志。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc2cd9e087804342978c671aec803489~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="" loading="lazy"></p>`,19)),n("p",null,[s[10]||(s[10]=a("运行完后访问 ")),n("a",d,"username.github.io/repo",512),s[11]||(s[11]=a(" 就能看到部署后的效果了。"))]),s[19]||(s[19]=n("h2",{id:"源码",tabindex:"-1"},[a("源码 "),n("a",{class:"header-anchor",href:"#源码","aria-label":'Permalink to "源码"'},"​")],-1)),n("p",null,[s[12]||(s[12]=a("gitHub: ")),n("a",B,"github.com/process1024…",512)]),n("p",null,[s[13]||(s[13]=a("github pages: ")),n("a",b,"process1024.github.io/article/",512)]),n("p",null,[s[14]||(s[14]=a("gitee pages: ")),n("a",g,"junyi-chen.gitee.io/article/",512)]),s[20]||(s[20]=n("p",null,"本人整理的开源文档项目，有兴趣的可以私聊我一起维护完善~",-1)),s[21]||(s[21]=n("h2",{id:"结束语",tabindex:"-1"},[a("结束语 "),n("a",{class:"header-anchor",href:"#结束语","aria-label":'Permalink to "结束语"'},"​")],-1)),s[22]||(s[22]=n("p",null,"有什么说的不对或者有疑问的，欢迎在下面留言交流~~",-1))])])}const j=o(t,[["render",E]]);export{v as __pageData,j as default};
